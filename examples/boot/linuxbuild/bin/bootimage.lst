
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	1180006f          	j	1011c <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  # Clear Previous mode (set U-mode), disable interrupt in U-mode
  li t0, 0x00001880   # MPP[12:11] = 0x0 MPIE[7]=0 (Previous to machine mode)
   100b4:	000022b7          	lui	t0,0x2
   100b8:	8802829b          	addiw	t0,t0,-1920
  csrc mstatus, t0    # run tests in user mode = 0, by clearing bits
   100bc:	3002b073          	csrc	mstatus,t0

  la t0, trap_table
   100c0:	00000297          	auipc	t0,0x0
   100c4:	f4428293          	addi	t0,t0,-188 # 10004 <trap_table>
  csrw mtvec, t0
   100c8:	30529073          	csrw	mtvec,t0
  li t0, 0x00000800
   100cc:	000012b7          	lui	t0,0x1
   100d0:	8002829b          	addiw	t0,t0,-2048
  csrs mie, t0       # Enable External irq (ftom PLIC) for M mode
   100d4:	3042a073          	csrs	mie,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100d8:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100dc:	08200137          	lui	sp,0x8200
  addi sp,sp,-256
   100e0:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ee3e4>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100e4:	7b311073          	csrw	0x7b3,sp

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100e8:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100ec:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100f0:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100f4:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100f8:	40a10133          	sub	sp,sp,a0

  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   100fc:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   10100:	00050663          	beqz	a0,1010c <init0>
  wfi
   10104:	10500073          	wfi
  j end_init0
   10108:	0080006f          	j	10110 <end_init0>

000000000001010c <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   1010c:	28e000ef          	jal	ra,1039a <_init>

0000000000010110 <end_init0>:
end_init0:

  ##! jump to entry point in SRAM = 0x08000000
  ##!     'meps' - Machine Exception Program Coutner
  li  t0, SRAM_BASE_ADDR
   10110:	080002b7          	lui	t0,0x8000
  csrw mepc, t0
   10114:	34129073          	csrw	mepc,t0
  mret
   10118:	30200073          	mret

000000000001011c <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   1011c:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   10120:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10124:	100f5e63          	bgez	t5,10240 <handle_exception>

0000000000010128 <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   10128:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   1012c:	00113023          	sd	ra,0(sp)
   10130:	00813423          	sd	s0,8(sp)
   10134:	00913823          	sd	s1,16(sp)
   10138:	01213c23          	sd	s2,24(sp)
   1013c:	03313023          	sd	s3,32(sp)
   10140:	03413423          	sd	s4,40(sp)
   10144:	03513823          	sd	s5,48(sp)
   10148:	03613c23          	sd	s6,56(sp)
   1014c:	05713023          	sd	s7,64(sp)
   10150:	05813423          	sd	s8,72(sp)
   10154:	05913823          	sd	s9,80(sp)
   10158:	05a13c23          	sd	s10,88(sp)
   1015c:	07b13023          	sd	s11,96(sp)
   10160:	06213423          	sd	sp,104(sp)
   10164:	07013c23          	sd	a6,120(sp)
   10168:	09113023          	sd	a7,128(sp)
   1016c:	08a13423          	sd	a0,136(sp)
   10170:	08b13823          	sd	a1,144(sp)
   10174:	08c13c23          	sd	a2,152(sp)
   10178:	0ad13023          	sd	a3,160(sp)
   1017c:	0ae13423          	sd	a4,168(sp)
   10180:	0af13823          	sd	a5,176(sp)
   10184:	0b013c23          	sd	a6,184(sp)
   10188:	0d113023          	sd	a7,192(sp)
   1018c:	0c513423          	sd	t0,200(sp)
   10190:	0c613823          	sd	t1,208(sp)
   10194:	0c713c23          	sd	t2,216(sp)
   10198:	0fc13023          	sd	t3,224(sp)
   1019c:	0fd13423          	sd	t4,232(sp)
   101a0:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   101a4:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   101a8:	341025f3          	csrr	a1,mepc
  mv a2, sp
   101ac:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   101b0:	480000ef          	jal	ra,10630 <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   101b4:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   101b8:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   101bc:	00013083          	ld	ra,0(sp)
   101c0:	00813403          	ld	s0,8(sp)
   101c4:	01013483          	ld	s1,16(sp)
   101c8:	01813903          	ld	s2,24(sp)
   101cc:	02013983          	ld	s3,32(sp)
   101d0:	02813a03          	ld	s4,40(sp)
   101d4:	03013a83          	ld	s5,48(sp)
   101d8:	03813b03          	ld	s6,56(sp)
   101dc:	04013b83          	ld	s7,64(sp)
   101e0:	04813c03          	ld	s8,72(sp)
   101e4:	05013c83          	ld	s9,80(sp)
   101e8:	05813d03          	ld	s10,88(sp)
   101ec:	06013d83          	ld	s11,96(sp)
   101f0:	06813103          	ld	sp,104(sp)
   101f4:	07813803          	ld	a6,120(sp)
   101f8:	08013883          	ld	a7,128(sp)
   101fc:	08813503          	ld	a0,136(sp)
   10200:	09013583          	ld	a1,144(sp)
   10204:	09813603          	ld	a2,152(sp)
   10208:	0a013683          	ld	a3,160(sp)
   1020c:	0a813703          	ld	a4,168(sp)
   10210:	0b013783          	ld	a5,176(sp)
   10214:	0b813803          	ld	a6,184(sp)
   10218:	0c013883          	ld	a7,192(sp)
   1021c:	0c813283          	ld	t0,200(sp)
   10220:	0d013303          	ld	t1,208(sp)
   10224:	0d813383          	ld	t2,216(sp)
   10228:	0e013e03          	ld	t3,224(sp)
   1022c:	0e813e83          	ld	t4,232(sp)
   10230:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10234:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   10238:	34002f73          	csrr	t5,mscratch
  mret
   1023c:	30200073          	mret

0000000000010240 <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   10240:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10244:	2d0000ef          	jal	ra,10514 <exception_handler_c>
  mret
   10248:	30200073          	mret
   1024c:	0000                	unimp
   1024e:	0000                	unimp
	...

0000000000010252 <fw_get_cpuid>:

uint64_t get_dev_bar(uint16_t vid, uint16_t did);

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   10252:	1101                	addi	sp,sp,-32
   10254:	ec22                	sd	s0,24(sp)
   10256:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   10258:	f14027f3          	csrr	a5,mhartid
   1025c:	fef42623          	sw	a5,-20(s0)
    return ret;
   10260:	fec42783          	lw	a5,-20(s0)
}
   10264:	853e                	mv	a0,a5
   10266:	6462                	ld	s0,24(sp)
   10268:	6105                	addi	sp,sp,32
   1026a:	8082                	ret

000000000001026c <led_set>:

void led_set(int output) {
   1026c:	1101                	addi	sp,sp,-32
   1026e:	ec22                	sd	s0,24(sp)
   10270:	1000                	addi	s0,sp,32
   10272:	87aa                	mv	a5,a0
   10274:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   10278:	fec42783          	lw	a5,-20(s0)
   1027c:	0047979b          	slliw	a5,a5,0x4
   10280:	0007871b          	sext.w	a4,a5
   10284:	100607b7          	lui	a5,0x10060
   10288:	2701                	sext.w	a4,a4
   1028a:	c7d8                	sw	a4,12(a5)
}
   1028c:	0001                	nop
   1028e:	6462                	ld	s0,24(sp)
   10290:	6105                	addi	sp,sp,32
   10292:	8082                	ret

0000000000010294 <get_dip>:

int get_dip(int idx) {
   10294:	7179                	addi	sp,sp,-48
   10296:	f422                	sd	s0,40(sp)
   10298:	1800                	addi	s0,sp,48
   1029a:	87aa                	mv	a5,a0
   1029c:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   102a0:	100607b7          	lui	a5,0x10060
   102a4:	439c                	lw	a5,0(a5)
   102a6:	0007871b          	sext.w	a4,a5
   102aa:	fdc42783          	lw	a5,-36(s0)
   102ae:	00f757bb          	srlw	a5,a4,a5
   102b2:	2781                	sext.w	a5,a5
   102b4:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   102b8:	fec42783          	lw	a5,-20(s0)
   102bc:	8b85                	andi	a5,a5,1
   102be:	2781                	sext.w	a5,a5
}
   102c0:	853e                	mv	a0,a5
   102c2:	7422                	ld	s0,40(sp)
   102c4:	6145                	addi	sp,sp,48
   102c6:	8082                	ret

00000000000102c8 <copy_image>:


void copy_image() { 
   102c8:	7139                	addi	sp,sp,-64
   102ca:	fc06                	sd	ra,56(sp)
   102cc:	f822                	sd	s0,48(sp)
   102ce:	0080                	addi	s0,sp,64
    uint32_t tech;
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
   102d0:	090007b7          	lui	a5,0x9000
   102d4:	fef43023          	sd	a5,-32(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   102d8:	080007b7          	lui	a5,0x8000
   102dc:	fcf43c23          	sd	a5,-40(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   102e0:	100ff7b7          	lui	a5,0x100ff
   102e4:	fcf43823          	sd	a5,-48(s0)

    /** 
     * Speed-up RTL simulation by skipping coping stage.
     * Or skip this stage to avoid rewritting of externally loaded image.
     */
    tech = pnp->tech & 0xFF;
   102e8:	fd043783          	ld	a5,-48(s0)
   102ec:	479c                	lw	a5,8(a5)
   102ee:	0ff7f793          	andi	a5,a5,255
   102f2:	fcf42623          	sw	a5,-52(s0)

    uint64_t qspi2 = get_dev_bar(VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   102f6:	07500593          	li	a1,117
   102fa:	0f100513          	li	a0,241
   102fe:	00000097          	auipc	ra,0x0
   10302:	3a0080e7          	jalr	928(ra) # 1069e <get_dev_bar>
   10306:	fea43423          	sd	a0,-24(s0)
    if (qspi2 != ~0ull) {
   1030a:	fe843703          	ld	a4,-24(s0)
   1030e:	57fd                	li	a5,-1
   10310:	02f70863          	beq	a4,a5,10340 <copy_image+0x78>
        print_uart("Select . .QSPI2\r\n", 17);
   10314:	45c5                	li	a1,17
   10316:	67c5                	lui	a5,0x11
   10318:	5e078513          	addi	a0,a5,1504 # 115e0 <strnlen+0x1c>
   1031c:	4fa000ef          	jal	ra,10816 <print_uart>
        if (run_from_sdcard() == -1) {
   10320:	7a9000ef          	jal	ra,112c8 <run_from_sdcard>
   10324:	87aa                	mv	a5,a0
   10326:	873e                	mv	a4,a5
   10328:	57fd                	li	a5,-1
   1032a:	00f71b63          	bne	a4,a5,10340 <copy_image+0x78>
            print_uart("QSPI2. . .FAILED\r\n", 18);
   1032e:	45c9                	li	a1,18
   10330:	67c5                	lui	a5,0x11
   10332:	5f878513          	addi	a0,a5,1528 # 115f8 <strnlen+0x34>
   10336:	4e0000ef          	jal	ra,10816 <print_uart>
            qspi2 = ~0ull;
   1033a:	57fd                	li	a5,-1
   1033c:	fef43423          	sd	a5,-24(s0)
        }
    }

    if (qspi2 != ~0ull) {
   10340:	fe843703          	ld	a4,-24(s0)
   10344:	57fd                	li	a5,-1
   10346:	02f71763          	bne	a4,a5,10374 <copy_image+0xac>
        // Copy BSL from SD-card
    } else if (pnp->fwid == 0) {
   1034a:	fd043783          	ld	a5,-48(s0)
   1034e:	43dc                	lw	a5,4(a5)
   10350:	e395                	bnez	a5,10374 <copy_image+0xac>
        print_uart("Coping . .FWIMAGE\r\n", 19);
   10352:	45cd                	li	a1,19
   10354:	67c5                	lui	a5,0x11
   10356:	61078513          	addi	a0,a5,1552 # 11610 <strnlen+0x4c>
   1035a:	4bc000ef          	jal	ra,10816 <print_uart>
        memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
   1035e:	000407b7          	lui	a5,0x40
   10362:	863e                	mv	a2,a5
   10364:	fe043583          	ld	a1,-32(s0)
   10368:	fd843503          	ld	a0,-40(s0)
   1036c:	00001097          	auipc	ra,0x1
   10370:	198080e7          	jalr	408(ra) # 11504 <memcpy>
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   10374:	fd043783          	ld	a5,-48(s0)
   10378:	20211737          	lui	a4,0x20211
   1037c:	1237071b          	addiw	a4,a4,291
   10380:	c3d8                	sw	a4,4(a5)
}
   10382:	0001                	nop
   10384:	70e2                	ld	ra,56(sp)
   10386:	7442                	ld	s0,48(sp)
   10388:	6121                	addi	sp,sp,64
   1038a:	8082                	ret

000000000001038c <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   1038c:	1141                	addi	sp,sp,-16
   1038e:	e422                	sd	s0,8(sp)
   10390:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   10392:	0001                	nop
   10394:	6422                	ld	s0,8(sp)
   10396:	0141                	addi	sp,sp,16
   10398:	8082                	ret

000000000001039a <_init>:

void _init() {
   1039a:	7139                	addi	sp,sp,-64
   1039c:	fc06                	sd	ra,56(sp)
   1039e:	f822                	sd	s0,48(sp)
   103a0:	0080                	addi	s0,sp,64
    uint32_t tech;
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   103a2:	100ff7b7          	lui	a5,0x100ff
   103a6:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   103aa:	100107b7          	lui	a5,0x10010
   103ae:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   103b2:	100607b7          	lui	a5,0x10060
   103b6:	fcf43c23          	sd	a5,-40(s0)
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   103ba:	47a1                	li	a5,8
   103bc:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   103c0:	fd043783          	ld	a5,-48(s0)
   103c4:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   103c8:	6785                	lui	a5,0x1
   103ca:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   103ce:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   103d2:	fd043783          	ld	a5,-48(s0)
   103d6:	3047b073          	csrc	mie,a5

    // Half period of the uart = Fbus / 115200 / 2 = 70 MHz / 115200 / 2:
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   103da:	fe043783          	ld	a5,-32(s0)
   103de:	0ad00713          	li	a4,173
   103e2:	cf98                	sw	a4,24(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   103e4:	fd843783          	ld	a5,-40(s0)
   103e8:	473d                	li	a4,15
   103ea:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   103ec:	fd843783          	ld	a5,-40(s0)
   103f0:	6705                	lui	a4,0x1
   103f2:	3741                	addiw	a4,a4,-16
   103f4:	c798                	sw	a4,8(a5)

    led_set(0x01);
   103f6:	4505                	li	a0,1
   103f8:	e75ff0ef          	jal	ra,1026c <led_set>

    copy_image();
   103fc:	ecdff0ef          	jal	ra,102c8 <copy_image>
    led_set(0x02);
   10400:	4509                	li	a0,2
   10402:	e6bff0ef          	jal	ra,1026c <led_set>

    print_uart("Boot . . .", 10);
   10406:	45a9                	li	a1,10
   10408:	67c5                	lui	a5,0x11
   1040a:	62878513          	addi	a0,a5,1576 # 11628 <strnlen+0x64>
   1040e:	408000ef          	jal	ra,10816 <print_uart>
    print_uart("OK\r\n", 4);
   10412:	4591                	li	a1,4
   10414:	67c5                	lui	a5,0x11
   10416:	63878513          	addi	a0,a5,1592 # 11638 <strnlen+0x74>
   1041a:	3fc000ef          	jal	ra,10816 <print_uart>

    tech = (pnp->tech >> 24) & 0xff;
   1041e:	fe843783          	ld	a5,-24(s0)
   10422:	479c                	lw	a5,8(a5)
   10424:	0187d79b          	srliw	a5,a5,0x18
   10428:	fcf42623          	sw	a5,-52(s0)
    led_set(tech);
   1042c:	fcc42783          	lw	a5,-52(s0)
   10430:	853e                	mv	a0,a5
   10432:	e3bff0ef          	jal	ra,1026c <led_set>
    led_set(0x03);
   10436:	450d                	li	a0,3
   10438:	e35ff0ef          	jal	ra,1026c <led_set>
}
   1043c:	0001                	nop
   1043e:	70e2                	ld	ra,56(sp)
   10440:	7442                	ld	s0,48(sp)
   10442:	6121                	addi	sp,sp,64
   10444:	8082                	ret

0000000000010446 <main>:

/** Not used actually */
int main() {
   10446:	1141                	addi	sp,sp,-16
   10448:	e422                	sd	s0,8(sp)
   1044a:	0800                	addi	s0,sp,16
    while (1) {}
   1044c:	a001                	j	1044c <main+0x6>
	...

0000000000010450 <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   10450:	1101                	addi	sp,sp,-32
   10452:	ec22                	sd	s0,24(sp)
   10454:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   10456:	342027f3          	csrr	a5,mcause
   1045a:	fef42623          	sw	a5,-20(s0)
    return ret;
   1045e:	fec42783          	lw	a5,-20(s0)
}
   10462:	853e                	mv	a0,a5
   10464:	6462                	ld	s0,24(sp)
   10466:	6105                	addi	sp,sp,32
   10468:	8082                	ret

000000000001046a <get_mepc>:

int get_mepc() {
   1046a:	1101                	addi	sp,sp,-32
   1046c:	ec22                	sd	s0,24(sp)
   1046e:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   10470:	341027f3          	csrr	a5,mepc
   10474:	fef42623          	sw	a5,-20(s0)
    return ret;
   10478:	fec42783          	lw	a5,-20(s0)
}
   1047c:	853e                	mv	a0,a5
   1047e:	6462                	ld	s0,24(sp)
   10480:	6105                	addi	sp,sp,32
   10482:	8082                	ret

0000000000010484 <env_call>:


void env_call(long long test_id) {
   10484:	7179                	addi	sp,sp,-48
   10486:	f406                	sd	ra,40(sp)
   10488:	f022                	sd	s0,32(sp)
   1048a:	1800                	addi	s0,sp,48
   1048c:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   10490:	fd843783          	ld	a5,-40(s0)
   10494:	c7bd                	beqz	a5,10502 <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   10496:	45b5                	li	a1,13
   10498:	67c5                	lui	a5,0x11
   1049a:	64078513          	addi	a0,a5,1600 # 11640 <strnlen+0x7c>
   1049e:	00000097          	auipc	ra,0x0
   104a2:	378080e7          	jalr	888(ra) # 10816 <print_uart>
        print_uart("a0=", 3);
   104a6:	458d                	li	a1,3
   104a8:	67c5                	lui	a5,0x11
   104aa:	65078513          	addi	a0,a5,1616 # 11650 <strnlen+0x8c>
   104ae:	00000097          	auipc	ra,0x0
   104b2:	368080e7          	jalr	872(ra) # 10816 <print_uart>
        print_uart_hex(test_id);
   104b6:	fd843503          	ld	a0,-40(s0)
   104ba:	3ce000ef          	jal	ra,10888 <print_uart_hex>
        print_uart("\r\n", 2);
   104be:	4589                	li	a1,2
   104c0:	67c5                	lui	a5,0x11
   104c2:	65878513          	addi	a0,a5,1624 # 11658 <strnlen+0x94>
   104c6:	00000097          	auipc	ra,0x0
   104ca:	350080e7          	jalr	848(ra) # 10816 <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   104ce:	343027f3          	csrr	a5,mbadaddr
   104d2:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   104d6:	45a5                	li	a1,9
   104d8:	67c5                	lui	a5,0x11
   104da:	66078513          	addi	a0,a5,1632 # 11660 <strnlen+0x9c>
   104de:	00000097          	auipc	ra,0x0
   104e2:	338080e7          	jalr	824(ra) # 10816 <print_uart>
        print_uart_hex(mbadaddr);
   104e6:	fec42783          	lw	a5,-20(s0)
   104ea:	853e                	mv	a0,a5
   104ec:	39c000ef          	jal	ra,10888 <print_uart_hex>
        print_uart("\r\n", 2);
   104f0:	4589                	li	a1,2
   104f2:	67c5                	lui	a5,0x11
   104f4:	65878513          	addi	a0,a5,1624 # 11658 <strnlen+0x94>
   104f8:	00000097          	auipc	ra,0x0
   104fc:	31e080e7          	jalr	798(ra) # 10816 <print_uart>
   10500:	a809                	j	10512 <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   10502:	45b5                	li	a1,13
   10504:	67c5                	lui	a5,0x11
   10506:	67078513          	addi	a0,a5,1648 # 11670 <strnlen+0xac>
   1050a:	00000097          	auipc	ra,0x0
   1050e:	30c080e7          	jalr	780(ra) # 10816 <print_uart>
    }
    while (1) {}
   10512:	a001                	j	10512 <env_call+0x8e>

0000000000010514 <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   10514:	7179                	addi	sp,sp,-48
   10516:	f406                	sd	ra,40(sp)
   10518:	f022                	sd	s0,32(sp)
   1051a:	1800                	addi	s0,sp,48
   1051c:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   10520:	00000097          	auipc	ra,0x0
   10524:	f30080e7          	jalr	-208(ra) # 10450 <get_mcause>
   10528:	87aa                	mv	a5,a0
   1052a:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   1052e:	fec42783          	lw	a5,-20(s0)
   10532:	37e1                	addiw	a5,a5,-8
   10534:	0007871b          	sext.w	a4,a5
   10538:	4785                	li	a5,1
   1053a:	00e7e963          	bltu	a5,a4,1054c <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   1053e:	fd843503          	ld	a0,-40(s0)
   10542:	00000097          	auipc	ra,0x0
   10546:	f42080e7          	jalr	-190(ra) # 10484 <env_call>
        return;
   1054a:	a0b9                	j	10598 <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   1054c:	459d                	li	a1,7
   1054e:	67c5                	lui	a5,0x11
   10550:	68078513          	addi	a0,a5,1664 # 11680 <strnlen+0xbc>
   10554:	2c2000ef          	jal	ra,10816 <print_uart>
    print_uart_hex(mcause);
   10558:	fec42783          	lw	a5,-20(s0)
   1055c:	853e                	mv	a0,a5
   1055e:	00000097          	auipc	ra,0x0
   10562:	32a080e7          	jalr	810(ra) # 10888 <print_uart_hex>
    print_uart(",mepc:", 6);
   10566:	4599                	li	a1,6
   10568:	67c5                	lui	a5,0x11
   1056a:	68878513          	addi	a0,a5,1672 # 11688 <strnlen+0xc4>
   1056e:	2a8000ef          	jal	ra,10816 <print_uart>
    print_uart_hex(get_mepc());
   10572:	ef9ff0ef          	jal	ra,1046a <get_mepc>
   10576:	87aa                	mv	a5,a0
   10578:	853e                	mv	a0,a5
   1057a:	00000097          	auipc	ra,0x0
   1057e:	30e080e7          	jalr	782(ra) # 10888 <print_uart_hex>
    print_uart("\r\n", 2);
   10582:	4589                	li	a1,2
   10584:	67c5                	lui	a5,0x11
   10586:	65878513          	addi	a0,a5,1624 # 11658 <strnlen+0x94>
   1058a:	28c000ef          	jal	ra,10816 <print_uart>

    /// Exception trap
    led_set(0xF0);
   1058e:	0f000513          	li	a0,240
   10592:	cdbff0ef          	jal	ra,1026c <led_set>
    while (1) {}
   10596:	a001                	j	10596 <exception_handler_c+0x82>
}
   10598:	70a2                	ld	ra,40(sp)
   1059a:	7402                	ld	s0,32(sp)
   1059c:	6145                	addi	sp,sp,48
   1059e:	8082                	ret

00000000000105a0 <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   105a0:	1141                	addi	sp,sp,-16
   105a2:	e406                	sd	ra,8(sp)
   105a4:	e022                	sd	s0,0(sp)
   105a6:	0800                	addi	s0,sp,16
    led_set(0xF0);
   105a8:	0f000513          	li	a0,240
   105ac:	00000097          	auipc	ra,0x0
   105b0:	cc0080e7          	jalr	-832(ra) # 1026c <led_set>
    print_uart("fatal_error()\r\n", 15);
   105b4:	45bd                	li	a1,15
   105b6:	67c5                	lui	a5,0x11
   105b8:	69078513          	addi	a0,a5,1680 # 11690 <strnlen+0xcc>
   105bc:	00000097          	auipc	ra,0x0
   105c0:	25a080e7          	jalr	602(ra) # 10816 <print_uart>
    while (1) {}
   105c4:	a001                	j	105c4 <fatal_error+0x24>

00000000000105c6 <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   105c6:	7179                	addi	sp,sp,-48
   105c8:	f422                	sd	s0,40(sp)
   105ca:	1800                	addi	s0,sp,48
   105cc:	87aa                	mv	a5,a0
   105ce:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   105d2:	0c0007b7          	lui	a5,0xc000
   105d6:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   105da:	fe843703          	ld	a4,-24(s0)
   105de:	fdc42783          	lw	a5,-36(s0)
   105e2:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfee6e4>
   105e6:	07b2                	slli	a5,a5,0xc
   105e8:	97ba                	add	a5,a5,a4
   105ea:	43dc                	lw	a5,4(a5)
   105ec:	2781                	sext.w	a5,a5
}
   105ee:	853e                	mv	a0,a5
   105f0:	7422                	ld	s0,40(sp)
   105f2:	6145                	addi	sp,sp,48
   105f4:	8082                	ret

00000000000105f6 <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   105f6:	7179                	addi	sp,sp,-48
   105f8:	f422                	sd	s0,40(sp)
   105fa:	1800                	addi	s0,sp,48
   105fc:	87aa                	mv	a5,a0
   105fe:	872e                	mv	a4,a1
   10600:	fcf42e23          	sw	a5,-36(s0)
   10604:	87ba                	mv	a5,a4
   10606:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   1060a:	0c0007b7          	lui	a5,0xc000
   1060e:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   10612:	fd842703          	lw	a4,-40(s0)
   10616:	fe843683          	ld	a3,-24(s0)
   1061a:	fdc42783          	lw	a5,-36(s0)
   1061e:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfee6e4>
   10622:	07b2                	slli	a5,a5,0xc
   10624:	97b6                	add	a5,a5,a3
   10626:	c3d8                	sw	a4,4(a5)
}
   10628:	0001                	nop
   1062a:	7422                	ld	s0,40(sp)
   1062c:	6145                	addi	sp,sp,48
   1062e:	8082                	ret

0000000000010630 <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   10630:	7139                	addi	sp,sp,-64
   10632:	fc06                	sd	ra,56(sp)
   10634:	f822                	sd	s0,48(sp)
   10636:	0080                	addi	s0,sp,64
   10638:	fca43c23          	sd	a0,-40(s0)
   1063c:	fcb43823          	sd	a1,-48(s0)
   10640:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   10644:	fd843783          	ld	a5,-40(s0)
   10648:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   1064c:	fe744783          	lbu	a5,-25(s0)
   10650:	f807f793          	andi	a5,a5,-128
   10654:	0ff7f793          	andi	a5,a5,255
   10658:	cb85                	beqz	a5,10688 <interrupt_handler_c+0x58>
   1065a:	fe043703          	ld	a4,-32(s0)
   1065e:	57fd                	li	a5,-1
   10660:	8385                	srli	a5,a5,0x1
   10662:	8f7d                	and	a4,a4,a5
   10664:	47ad                	li	a5,11
   10666:	02f71163          	bne	a4,a5,10688 <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   1066a:	4501                	li	a0,0
   1066c:	f5bff0ef          	jal	ra,105c6 <plic_claim>
   10670:	87aa                	mv	a5,a0
   10672:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   10676:	fec42783          	lw	a5,-20(s0)
   1067a:	85be                	mv	a1,a5
   1067c:	4501                	li	a0,0
   1067e:	00000097          	auipc	ra,0x0
   10682:	f78080e7          	jalr	-136(ra) # 105f6 <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10686:	a029                	j	10690 <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   10688:	00000097          	auipc	ra,0x0
   1068c:	f18080e7          	jalr	-232(ra) # 105a0 <fatal_error>
    }

    return epc;
   10690:	fd043783          	ld	a5,-48(s0)
}
   10694:	853e                	mv	a0,a5
   10696:	70e2                	ld	ra,56(sp)
   10698:	7442                	ld	s0,48(sp)
   1069a:	6121                	addi	sp,sp,64
   1069c:	8082                	ret

000000000001069e <get_dev_bar>:
typedef union slave_cfg_type {
    slave_cfg_bits_type u;
    uint64_t v[2];
} slave_cfg_type;

uint64_t get_dev_bar(uint16_t vid, uint16_t did) {
   1069e:	711d                	addi	sp,sp,-96
   106a0:	eca2                	sd	s0,88(sp)
   106a2:	1080                	addi	s0,sp,96
   106a4:	87aa                	mv	a5,a0
   106a6:	872e                	mv	a4,a1
   106a8:	faf41723          	sh	a5,-82(s0)
   106ac:	87ba                	mv	a5,a4
   106ae:	faf41623          	sh	a5,-84(s0)
    master_cfg_type mcfg;
    slave_cfg_type scfg;
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   106b2:	100ff7b7          	lui	a5,0x100ff
   106b6:	fcf43c23          	sd	a5,-40(s0)
    int slv_total = (pnp->tech >> 8) & 0xFF;
   106ba:	fd843783          	ld	a5,-40(s0)
   106be:	479c                	lw	a5,8(a5)
   106c0:	0087d79b          	srliw	a5,a5,0x8
   106c4:	2781                	sext.w	a5,a5
   106c6:	2781                	sext.w	a5,a5
   106c8:	0ff7f793          	andi	a5,a5,255
   106cc:	fcf42a23          	sw	a5,-44(s0)
    int mst_total = (pnp->tech >> 16) & 0xFF;
   106d0:	fd843783          	ld	a5,-40(s0)
   106d4:	479c                	lw	a5,8(a5)
   106d6:	0107d79b          	srliw	a5,a5,0x10
   106da:	2781                	sext.w	a5,a5
   106dc:	2781                	sext.w	a5,a5
   106de:	0ff7f793          	andi	a5,a5,255
   106e2:	fcf42823          	sw	a5,-48(s0)
    int off = 0;
   106e6:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < mst_total; i++) {
   106ea:	fe042423          	sw	zero,-24(s0)
   106ee:	a82d                	j	10728 <get_dev_bar+0x8a>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   106f0:	fec42783          	lw	a5,-20(s0)
   106f4:	04078793          	addi	a5,a5,64 # 100ff040 <_end+0x100ed524>
   106f8:	fd843703          	ld	a4,-40(s0)
   106fc:	97ba                	add	a5,a5,a4
   106fe:	639c                	ld	a5,0(a5)
   10700:	fcf43423          	sd	a5,-56(s0)
        off += pnp->cfg_table[off];
   10704:	fd843703          	ld	a4,-40(s0)
   10708:	fec42783          	lw	a5,-20(s0)
   1070c:	97ba                	add	a5,a5,a4
   1070e:	0407c783          	lbu	a5,64(a5)
   10712:	2781                	sext.w	a5,a5
   10714:	fec42703          	lw	a4,-20(s0)
   10718:	9fb9                	addw	a5,a5,a4
   1071a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   1071e:	fe842783          	lw	a5,-24(s0)
   10722:	2785                	addiw	a5,a5,1
   10724:	fef42423          	sw	a5,-24(s0)
   10728:	fe842703          	lw	a4,-24(s0)
   1072c:	fd042783          	lw	a5,-48(s0)
   10730:	2701                	sext.w	a4,a4
   10732:	2781                	sext.w	a5,a5
   10734:	faf74ee3          	blt	a4,a5,106f0 <get_dev_bar+0x52>
    }

    for (int i = 0; i < slv_total; i++) {
   10738:	fe042223          	sw	zero,-28(s0)
   1073c:	a8b5                	j	107b8 <get_dev_bar+0x11a>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   1073e:	fec42783          	lw	a5,-20(s0)
   10742:	04078793          	addi	a5,a5,64
   10746:	fd843703          	ld	a4,-40(s0)
   1074a:	97ba                	add	a5,a5,a4
   1074c:	639c                	ld	a5,0(a5)
   1074e:	faf43c23          	sd	a5,-72(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10752:	fec42783          	lw	a5,-20(s0)
   10756:	27a1                	addiw	a5,a5,8
   10758:	2781                	sext.w	a5,a5
   1075a:	04078793          	addi	a5,a5,64
   1075e:	fd843703          	ld	a4,-40(s0)
   10762:	97ba                	add	a5,a5,a4
   10764:	639c                	ld	a5,0(a5)
   10766:	fcf43023          	sd	a5,-64(s0)

        if (scfg.u.vid == vid && scfg.u.did == did) {
   1076a:	fbe45783          	lhu	a5,-66(s0)
   1076e:	fae45703          	lhu	a4,-82(s0)
   10772:	2701                	sext.w	a4,a4
   10774:	2781                	sext.w	a5,a5
   10776:	00f71f63          	bne	a4,a5,10794 <get_dev_bar+0xf6>
   1077a:	fbc45783          	lhu	a5,-68(s0)
   1077e:	fac45703          	lhu	a4,-84(s0)
   10782:	2701                	sext.w	a4,a4
   10784:	2781                	sext.w	a5,a5
   10786:	00f71763          	bne	a4,a5,10794 <get_dev_bar+0xf6>
            return scfg.u.xaddr;
   1078a:	fc442783          	lw	a5,-60(s0)
   1078e:	1782                	slli	a5,a5,0x20
   10790:	9381                	srli	a5,a5,0x20
   10792:	a825                	j	107ca <get_dev_bar+0x12c>
        }
        off += pnp->cfg_table[off];
   10794:	fd843703          	ld	a4,-40(s0)
   10798:	fec42783          	lw	a5,-20(s0)
   1079c:	97ba                	add	a5,a5,a4
   1079e:	0407c783          	lbu	a5,64(a5)
   107a2:	2781                	sext.w	a5,a5
   107a4:	fec42703          	lw	a4,-20(s0)
   107a8:	9fb9                	addw	a5,a5,a4
   107aa:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   107ae:	fe442783          	lw	a5,-28(s0)
   107b2:	2785                	addiw	a5,a5,1
   107b4:	fef42223          	sw	a5,-28(s0)
   107b8:	fe442703          	lw	a4,-28(s0)
   107bc:	fd442783          	lw	a5,-44(s0)
   107c0:	2701                	sext.w	a4,a4
   107c2:	2781                	sext.w	a5,a5
   107c4:	f6f74de3          	blt	a4,a5,1073e <get_dev_bar+0xa0>
    }

    return ~0ull;
   107c8:	57fd                	li	a5,-1
}
   107ca:	853e                	mv	a0,a5
   107cc:	6466                	ld	s0,88(sp)
   107ce:	6125                	addi	sp,sp,96
   107d0:	8082                	ret
	...

00000000000107d4 <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   107d4:	7179                	addi	sp,sp,-48
   107d6:	f422                	sd	s0,40(sp)
   107d8:	1800                	addi	s0,sp,48
   107da:	87aa                	mv	a5,a0
   107dc:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   107e0:	100107b7          	lui	a5,0x10010
   107e4:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   107e8:	fe843783          	ld	a5,-24(s0)
   107ec:	439c                	lw	a5,0(a5)
   107ee:	2781                	sext.w	a5,a5
   107f0:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   107f4:	fe344783          	lbu	a5,-29(s0)
   107f8:	f807f793          	andi	a5,a5,-128
   107fc:	0ff7f793          	andi	a5,a5,255
   10800:	f7e5                	bnez	a5,107e8 <print_char+0x14>
    uart->txdata = ch;
   10802:	fdc42703          	lw	a4,-36(s0)
   10806:	fe843783          	ld	a5,-24(s0)
   1080a:	c398                	sw	a4,0(a5)
    return 0;
   1080c:	4781                	li	a5,0
}
   1080e:	853e                	mv	a0,a5
   10810:	7422                	ld	s0,40(sp)
   10812:	6145                	addi	sp,sp,48
   10814:	8082                	ret

0000000000010816 <print_uart>:

void print_uart(const char *buf, int sz) {
   10816:	7139                	addi	sp,sp,-64
   10818:	fc22                	sd	s0,56(sp)
   1081a:	0080                	addi	s0,sp,64
   1081c:	fca43423          	sd	a0,-56(s0)
   10820:	87ae                	mv	a5,a1
   10822:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10826:	100107b7          	lui	a5,0x10010
   1082a:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   1082e:	fe042623          	sw	zero,-20(s0)
   10832:	a83d                	j	10870 <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   10834:	fe043783          	ld	a5,-32(s0)
   10838:	439c                	lw	a5,0(a5)
   1083a:	2781                	sext.w	a5,a5
   1083c:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   10840:	fdb44783          	lbu	a5,-37(s0)
   10844:	f807f793          	andi	a5,a5,-128
   10848:	0ff7f793          	andi	a5,a5,255
   1084c:	f7e5                	bnez	a5,10834 <print_uart+0x1e>
        uart->txdata = buf[i];
   1084e:	fec42783          	lw	a5,-20(s0)
   10852:	fc843703          	ld	a4,-56(s0)
   10856:	97ba                	add	a5,a5,a4
   10858:	0007c783          	lbu	a5,0(a5) # 10010000 <_end+0xfffe4e4>
   1085c:	0007871b          	sext.w	a4,a5
   10860:	fe043783          	ld	a5,-32(s0)
   10864:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   10866:	fec42783          	lw	a5,-20(s0)
   1086a:	2785                	addiw	a5,a5,1
   1086c:	fef42623          	sw	a5,-20(s0)
   10870:	fec42703          	lw	a4,-20(s0)
   10874:	fc442783          	lw	a5,-60(s0)
   10878:	2701                	sext.w	a4,a4
   1087a:	2781                	sext.w	a5,a5
   1087c:	faf74ce3          	blt	a4,a5,10834 <print_uart+0x1e>
    }
}
   10880:	0001                	nop
   10882:	7462                	ld	s0,56(sp)
   10884:	6121                	addi	sp,sp,64
   10886:	8082                	ret

0000000000010888 <print_uart_hex>:

void print_uart_hex(long val) {
   10888:	7139                	addi	sp,sp,-64
   1088a:	fc22                	sd	s0,56(sp)
   1088c:	0080                	addi	s0,sp,64
   1088e:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10892:	100107b7          	lui	a5,0x10010
   10896:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   1089a:	fe042423          	sw	zero,-24(s0)
   1089e:	a041                	j	1091e <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   108a0:	fe043783          	ld	a5,-32(s0)
   108a4:	439c                	lw	a5,0(a5)
   108a6:	2781                	sext.w	a5,a5
   108a8:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   108ac:	fdb44783          	lbu	a5,-37(s0)
   108b0:	f807f793          	andi	a5,a5,-128
   108b4:	0ff7f793          	andi	a5,a5,255
   108b8:	f7e5                	bnez	a5,108a0 <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   108ba:	473d                	li	a4,15
   108bc:	fe842783          	lw	a5,-24(s0)
   108c0:	40f707bb          	subw	a5,a4,a5
   108c4:	2781                	sext.w	a5,a5
   108c6:	0027979b          	slliw	a5,a5,0x2
   108ca:	2781                	sext.w	a5,a5
   108cc:	fc843703          	ld	a4,-56(s0)
   108d0:	40f757b3          	sra	a5,a4,a5
   108d4:	0ff7f793          	andi	a5,a5,255
   108d8:	8bbd                	andi	a5,a5,15
   108da:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   108de:	fdf44783          	lbu	a5,-33(s0)
   108e2:	0ff7f713          	andi	a4,a5,255
   108e6:	47a5                	li	a5,9
   108e8:	00e7e963          	bltu	a5,a4,108fa <print_uart_hex+0x72>
            s = t + '0';
   108ec:	fdf44783          	lbu	a5,-33(s0)
   108f0:	0307879b          	addiw	a5,a5,48
   108f4:	fef407a3          	sb	a5,-17(s0)
   108f8:	a039                	j	10906 <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   108fa:	fdf44783          	lbu	a5,-33(s0)
   108fe:	0577879b          	addiw	a5,a5,87
   10902:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   10906:	fef44783          	lbu	a5,-17(s0)
   1090a:	0007871b          	sext.w	a4,a5
   1090e:	fe043783          	ld	a5,-32(s0)
   10912:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   10914:	fe842783          	lw	a5,-24(s0)
   10918:	2785                	addiw	a5,a5,1
   1091a:	fef42423          	sw	a5,-24(s0)
   1091e:	fe842783          	lw	a5,-24(s0)
   10922:	0007871b          	sext.w	a4,a5
   10926:	47bd                	li	a5,15
   10928:	f6e7dce3          	ble	a4,a5,108a0 <print_uart_hex+0x18>
    }
}
   1092c:	0001                	nop
   1092e:	7462                	ld	s0,56(sp)
   10930:	6121                	addi	sp,sp,64
   10932:	8082                	ret

0000000000010934 <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   10934:	7119                	addi	sp,sp,-128
   10936:	fc86                	sd	ra,120(sp)
   10938:	f8a2                	sd	s0,112(sp)
   1093a:	0100                	addi	s0,sp,128
   1093c:	f8a43c23          	sd	a0,-104(s0)
   10940:	87ae                	mv	a5,a1
   10942:	8736                	mv	a4,a3
   10944:	f8f42a23          	sw	a5,-108(s0)
   10948:	87b2                	mv	a5,a2
   1094a:	f8f42823          	sw	a5,-112(s0)
   1094e:	87ba                	mv	a5,a4
   10950:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   10954:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   10958:	f9442783          	lw	a5,-108(s0)
   1095c:	f9843703          	ld	a4,-104(s0)
   10960:	02f776b3          	remu	a3,a4,a5
   10964:	fec42783          	lw	a5,-20(s0)
   10968:	0017871b          	addiw	a4,a5,1
   1096c:	fee42623          	sw	a4,-20(s0)
   10970:	0ff6f713          	andi	a4,a3,255
   10974:	ff040693          	addi	a3,s0,-16
   10978:	97b6                	add	a5,a5,a3
   1097a:	fae78c23          	sb	a4,-72(a5) # 1000ffb8 <_end+0xfffe49c>
        if (num < base) {
   1097e:	f9442783          	lw	a5,-108(s0)
   10982:	f9843703          	ld	a4,-104(s0)
   10986:	00f76b63          	bltu	a4,a5,1099c <printnum+0x68>
            break;
        }
        num /= base;
   1098a:	f9442783          	lw	a5,-108(s0)
   1098e:	f9843703          	ld	a4,-104(s0)
   10992:	02f757b3          	divu	a5,a4,a5
   10996:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   1099a:	bf7d                	j	10958 <printnum+0x24>
            break;
   1099c:	0001                	nop
    }

    while (width-- > pos) {
   1099e:	a801                	j	109ae <printnum+0x7a>
        print_char(padc);
   109a0:	f8c42783          	lw	a5,-116(s0)
   109a4:	853e                	mv	a0,a5
   109a6:	00000097          	auipc	ra,0x0
   109aa:	e2e080e7          	jalr	-466(ra) # 107d4 <print_char>
    while (width-- > pos) {
   109ae:	f9042783          	lw	a5,-112(s0)
   109b2:	fff7871b          	addiw	a4,a5,-1
   109b6:	f8e42823          	sw	a4,-112(s0)
   109ba:	fec42703          	lw	a4,-20(s0)
   109be:	2701                	sext.w	a4,a4
   109c0:	fef740e3          	blt	a4,a5,109a0 <printnum+0x6c>
    }


    while (pos-- > 0) {
   109c4:	a089                	j	10a06 <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   109c6:	fec42783          	lw	a5,-20(s0)
   109ca:	ff040713          	addi	a4,s0,-16
   109ce:	97ba                	add	a5,a5,a4
   109d0:	fb87c783          	lbu	a5,-72(a5)
   109d4:	0007871b          	sext.w	a4,a5
   109d8:	fec42783          	lw	a5,-20(s0)
   109dc:	ff040693          	addi	a3,s0,-16
   109e0:	97b6                	add	a5,a5,a3
   109e2:	fb87c783          	lbu	a5,-72(a5)
   109e6:	86be                	mv	a3,a5
   109e8:	47a5                	li	a5,9
   109ea:	00d7f563          	bleu	a3,a5,109f4 <printnum+0xc0>
   109ee:	05700793          	li	a5,87
   109f2:	a019                	j	109f8 <printnum+0xc4>
   109f4:	03000793          	li	a5,48
   109f8:	9fb9                	addw	a5,a5,a4
   109fa:	2781                	sext.w	a5,a5
   109fc:	853e                	mv	a0,a5
   109fe:	00000097          	auipc	ra,0x0
   10a02:	dd6080e7          	jalr	-554(ra) # 107d4 <print_char>
    while (pos-- > 0) {
   10a06:	fec42783          	lw	a5,-20(s0)
   10a0a:	fff7871b          	addiw	a4,a5,-1
   10a0e:	fee42623          	sw	a4,-20(s0)
   10a12:	faf04ae3          	bgtz	a5,109c6 <printnum+0x92>
    }
}
   10a16:	0001                	nop
   10a18:	70e6                	ld	ra,120(sp)
   10a1a:	7446                	ld	s0,112(sp)
   10a1c:	6109                	addi	sp,sp,128
   10a1e:	8082                	ret

0000000000010a20 <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   10a20:	1101                	addi	sp,sp,-32
   10a22:	ec22                	sd	s0,24(sp)
   10a24:	1000                	addi	s0,sp,32
   10a26:	fea43423          	sd	a0,-24(s0)
   10a2a:	87ae                	mv	a5,a1
   10a2c:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   10a30:	fe442783          	lw	a5,-28(s0)
   10a34:	0007871b          	sext.w	a4,a5
   10a38:	4785                	li	a5,1
   10a3a:	00e7dc63          	ble	a4,a5,10a52 <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   10a3e:	fe843783          	ld	a5,-24(s0)
   10a42:	639c                	ld	a5,0(a5)
   10a44:	00878693          	addi	a3,a5,8
   10a48:	fe843703          	ld	a4,-24(s0)
   10a4c:	e314                	sd	a3,0(a4)
   10a4e:	639c                	ld	a5,0(a5)
   10a50:	a815                	j	10a84 <getuint+0x64>
    } else if (lflag) {
   10a52:	fe442783          	lw	a5,-28(s0)
   10a56:	2781                	sext.w	a5,a5
   10a58:	cb99                	beqz	a5,10a6e <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   10a5a:	fe843783          	ld	a5,-24(s0)
   10a5e:	639c                	ld	a5,0(a5)
   10a60:	00878693          	addi	a3,a5,8
   10a64:	fe843703          	ld	a4,-24(s0)
   10a68:	e314                	sd	a3,0(a4)
   10a6a:	639c                	ld	a5,0(a5)
   10a6c:	a821                	j	10a84 <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   10a6e:	fe843783          	ld	a5,-24(s0)
   10a72:	639c                	ld	a5,0(a5)
   10a74:	00878693          	addi	a3,a5,8
   10a78:	fe843703          	ld	a4,-24(s0)
   10a7c:	e314                	sd	a3,0(a4)
   10a7e:	439c                	lw	a5,0(a5)
   10a80:	1782                	slli	a5,a5,0x20
   10a82:	9381                	srli	a5,a5,0x20
}
   10a84:	853e                	mv	a0,a5
   10a86:	6462                	ld	s0,24(sp)
   10a88:	6105                	addi	sp,sp,32
   10a8a:	8082                	ret

0000000000010a8c <getint>:

static int64_t getint(va_list *ap, int lflag) {
   10a8c:	1101                	addi	sp,sp,-32
   10a8e:	ec22                	sd	s0,24(sp)
   10a90:	1000                	addi	s0,sp,32
   10a92:	fea43423          	sd	a0,-24(s0)
   10a96:	87ae                	mv	a5,a1
   10a98:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   10a9c:	fe442783          	lw	a5,-28(s0)
   10aa0:	0007871b          	sext.w	a4,a5
   10aa4:	4785                	li	a5,1
   10aa6:	00e7dc63          	ble	a4,a5,10abe <getint+0x32>
        return va_arg(*ap, long long);
   10aaa:	fe843783          	ld	a5,-24(s0)
   10aae:	639c                	ld	a5,0(a5)
   10ab0:	00878693          	addi	a3,a5,8
   10ab4:	fe843703          	ld	a4,-24(s0)
   10ab8:	e314                	sd	a3,0(a4)
   10aba:	639c                	ld	a5,0(a5)
   10abc:	a805                	j	10aec <getint+0x60>
    } else if (lflag) {
   10abe:	fe442783          	lw	a5,-28(s0)
   10ac2:	2781                	sext.w	a5,a5
   10ac4:	cb99                	beqz	a5,10ada <getint+0x4e>
        return va_arg(*ap, long);
   10ac6:	fe843783          	ld	a5,-24(s0)
   10aca:	639c                	ld	a5,0(a5)
   10acc:	00878693          	addi	a3,a5,8
   10ad0:	fe843703          	ld	a4,-24(s0)
   10ad4:	e314                	sd	a3,0(a4)
   10ad6:	639c                	ld	a5,0(a5)
   10ad8:	a811                	j	10aec <getint+0x60>
    }
    return va_arg(*ap, int);
   10ada:	fe843783          	ld	a5,-24(s0)
   10ade:	639c                	ld	a5,0(a5)
   10ae0:	00878693          	addi	a3,a5,8
   10ae4:	fe843703          	ld	a4,-24(s0)
   10ae8:	e314                	sd	a3,0(a4)
   10aea:	439c                	lw	a5,0(a5)
}
   10aec:	853e                	mv	a0,a5
   10aee:	6462                	ld	s0,24(sp)
   10af0:	6105                	addi	sp,sp,32
   10af2:	8082                	ret

0000000000010af4 <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   10af4:	711d                	addi	sp,sp,-96
   10af6:	ec86                	sd	ra,88(sp)
   10af8:	e8a2                	sd	s0,80(sp)
   10afa:	e4a6                	sd	s1,72(sp)
   10afc:	e0ca                	sd	s2,64(sp)
   10afe:	1080                	addi	s0,sp,96
   10b00:	faa43423          	sd	a0,-88(s0)
   10b04:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   10b08:	a819                	j	10b1e <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   10b0a:	2c048d63          	beqz	s1,10de4 <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   10b0e:	fa843783          	ld	a5,-88(s0)
   10b12:	0785                	addi	a5,a5,1
   10b14:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   10b18:	8526                	mv	a0,s1
   10b1a:	cbbff0ef          	jal	ra,107d4 <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   10b1e:	fa843783          	ld	a5,-88(s0)
   10b22:	0007c783          	lbu	a5,0(a5)
   10b26:	0007849b          	sext.w	s1,a5
   10b2a:	8726                	mv	a4,s1
   10b2c:	02500793          	li	a5,37
   10b30:	fcf71de3          	bne	a4,a5,10b0a <vprintfmt_lib+0x16>
        }
        fmt++;
   10b34:	fa843783          	ld	a5,-88(s0)
   10b38:	0785                	addi	a5,a5,1
   10b3a:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   10b3e:	fa843783          	ld	a5,-88(s0)
   10b42:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   10b46:	02000793          	li	a5,32
   10b4a:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   10b4e:	57fd                	li	a5,-1
   10b50:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   10b54:	57fd                	li	a5,-1
   10b56:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   10b5a:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   10b5e:	fa843783          	ld	a5,-88(s0)
   10b62:	00178713          	addi	a4,a5,1
   10b66:	fae43423          	sd	a4,-88(s0)
   10b6a:	0007c783          	lbu	a5,0(a5)
   10b6e:	0007849b          	sext.w	s1,a5
   10b72:	fdd4869b          	addiw	a3,s1,-35
   10b76:	0006871b          	sext.w	a4,a3
   10b7a:	05500793          	li	a5,85
   10b7e:	24e7e963          	bltu	a5,a4,10dd0 <vprintfmt_lib+0x2dc>
   10b82:	02069793          	slli	a5,a3,0x20
   10b86:	9381                	srli	a5,a5,0x20
   10b88:	00279713          	slli	a4,a5,0x2
   10b8c:	67c5                	lui	a5,0x11
   10b8e:	6a878793          	addi	a5,a5,1704 # 116a8 <strnlen+0xe4>
   10b92:	97ba                	add	a5,a5,a4
   10b94:	439c                	lw	a5,0(a5)
   10b96:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   10b98:	02d00793          	li	a5,45
   10b9c:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   10ba0:	bf7d                	j	10b5e <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   10ba2:	03000793          	li	a5,48
   10ba6:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   10baa:	bf55                	j	10b5e <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   10bac:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   10bb0:	fc842703          	lw	a4,-56(s0)
   10bb4:	87ba                	mv	a5,a4
   10bb6:	0027979b          	slliw	a5,a5,0x2
   10bba:	9fb9                	addw	a5,a5,a4
   10bbc:	0017979b          	slliw	a5,a5,0x1
   10bc0:	2781                	sext.w	a5,a5
   10bc2:	9fa5                	addw	a5,a5,s1
   10bc4:	2781                	sext.w	a5,a5
   10bc6:	fd07879b          	addiw	a5,a5,-48
   10bca:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   10bce:	fa843783          	ld	a5,-88(s0)
   10bd2:	0007c783          	lbu	a5,0(a5)
   10bd6:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   10bda:	8726                	mv	a4,s1
   10bdc:	02f00793          	li	a5,47
   10be0:	02e7df63          	ble	a4,a5,10c1e <vprintfmt_lib+0x12a>
   10be4:	8726                	mv	a4,s1
   10be6:	03900793          	li	a5,57
   10bea:	02e7ca63          	blt	a5,a4,10c1e <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   10bee:	fa843783          	ld	a5,-88(s0)
   10bf2:	0785                	addi	a5,a5,1
   10bf4:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   10bf8:	bf65                	j	10bb0 <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   10bfa:	fa043783          	ld	a5,-96(s0)
   10bfe:	00878713          	addi	a4,a5,8
   10c02:	fae43023          	sd	a4,-96(s0)
   10c06:	439c                	lw	a5,0(a5)
   10c08:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   10c0c:	a811                	j	10c20 <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   10c0e:	fcc42783          	lw	a5,-52(s0)
   10c12:	2781                	sext.w	a5,a5
   10c14:	f407d5e3          	bgez	a5,10b5e <vprintfmt_lib+0x6a>
                width = 0;
   10c18:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   10c1c:	b789                	j	10b5e <vprintfmt_lib+0x6a>
            goto process_precision;
   10c1e:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   10c20:	fcc42783          	lw	a5,-52(s0)
   10c24:	2781                	sext.w	a5,a5
   10c26:	f207dce3          	bgez	a5,10b5e <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   10c2a:	fc842783          	lw	a5,-56(s0)
   10c2e:	fcf42623          	sw	a5,-52(s0)
   10c32:	57fd                	li	a5,-1
   10c34:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   10c38:	b71d                	j	10b5e <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   10c3a:	fd042783          	lw	a5,-48(s0)
   10c3e:	2785                	addiw	a5,a5,1
   10c40:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   10c44:	bf29                	j	10b5e <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   10c46:	fa043783          	ld	a5,-96(s0)
   10c4a:	00878713          	addi	a4,a5,8
   10c4e:	fae43023          	sd	a4,-96(s0)
   10c52:	439c                	lw	a5,0(a5)
   10c54:	853e                	mv	a0,a5
   10c56:	b7fff0ef          	jal	ra,107d4 <print_char>
            break;
   10c5a:	a261                	j	10de2 <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   10c5c:	fa043783          	ld	a5,-96(s0)
   10c60:	00878713          	addi	a4,a5,8
   10c64:	fae43023          	sd	a4,-96(s0)
   10c68:	0007b903          	ld	s2,0(a5)
   10c6c:	00091563          	bnez	s2,10c76 <vprintfmt_lib+0x182>
                p = "(null)";
   10c70:	67c5                	lui	a5,0x11
   10c72:	6a078913          	addi	s2,a5,1696 # 116a0 <strnlen+0xdc>
            }
            if (width > 0 && padc != '-') {
   10c76:	fcc42783          	lw	a5,-52(s0)
   10c7a:	2781                	sext.w	a5,a5
   10c7c:	06f05263          	blez	a5,10ce0 <vprintfmt_lib+0x1ec>
   10c80:	fc744783          	lbu	a5,-57(s0)
   10c84:	0ff7f713          	andi	a4,a5,255
   10c88:	02d00793          	li	a5,45
   10c8c:	04f70a63          	beq	a4,a5,10ce0 <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   10c90:	fc842783          	lw	a5,-56(s0)
   10c94:	85be                	mv	a1,a5
   10c96:	854a                	mv	a0,s2
   10c98:	12d000ef          	jal	ra,115c4 <strnlen>
   10c9c:	87aa                	mv	a5,a0
   10c9e:	873e                	mv	a4,a5
   10ca0:	fcc42783          	lw	a5,-52(s0)
   10ca4:	9f99                	subw	a5,a5,a4
   10ca6:	fcf42623          	sw	a5,-52(s0)
   10caa:	a821                	j	10cc2 <vprintfmt_lib+0x1ce>
                    print_char(padc);
   10cac:	fc744783          	lbu	a5,-57(s0)
   10cb0:	2781                	sext.w	a5,a5
   10cb2:	853e                	mv	a0,a5
   10cb4:	b21ff0ef          	jal	ra,107d4 <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   10cb8:	fcc42783          	lw	a5,-52(s0)
   10cbc:	37fd                	addiw	a5,a5,-1
   10cbe:	fcf42623          	sw	a5,-52(s0)
   10cc2:	fcc42783          	lw	a5,-52(s0)
   10cc6:	2781                	sext.w	a5,a5
   10cc8:	fef042e3          	bgtz	a5,10cac <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   10ccc:	a811                	j	10ce0 <vprintfmt_lib+0x1ec>
                print_char(ch);
   10cce:	8526                	mv	a0,s1
   10cd0:	b05ff0ef          	jal	ra,107d4 <print_char>
                p++;
   10cd4:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   10cd6:	fcc42783          	lw	a5,-52(s0)
   10cda:	37fd                	addiw	a5,a5,-1
   10cdc:	fcf42623          	sw	a5,-52(s0)
   10ce0:	00094783          	lbu	a5,0(s2)
   10ce4:	0007849b          	sext.w	s1,a5
   10ce8:	c895                	beqz	s1,10d1c <vprintfmt_lib+0x228>
   10cea:	fc842783          	lw	a5,-56(s0)
   10cee:	2781                	sext.w	a5,a5
   10cf0:	fc07cfe3          	bltz	a5,10cce <vprintfmt_lib+0x1da>
   10cf4:	fc842783          	lw	a5,-56(s0)
   10cf8:	37fd                	addiw	a5,a5,-1
   10cfa:	fcf42423          	sw	a5,-56(s0)
   10cfe:	fc842783          	lw	a5,-56(s0)
   10d02:	2781                	sext.w	a5,a5
   10d04:	fc07d5e3          	bgez	a5,10cce <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   10d08:	a811                	j	10d1c <vprintfmt_lib+0x228>
                print_char(' ');
   10d0a:	02000513          	li	a0,32
   10d0e:	ac7ff0ef          	jal	ra,107d4 <print_char>
            for (; width > 0; width--) {
   10d12:	fcc42783          	lw	a5,-52(s0)
   10d16:	37fd                	addiw	a5,a5,-1
   10d18:	fcf42623          	sw	a5,-52(s0)
   10d1c:	fcc42783          	lw	a5,-52(s0)
   10d20:	2781                	sext.w	a5,a5
   10d22:	fef044e3          	bgtz	a5,10d0a <vprintfmt_lib+0x216>
            }
            break;
   10d26:	a875                	j	10de2 <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   10d28:	fd042703          	lw	a4,-48(s0)
   10d2c:	fa040793          	addi	a5,s0,-96
   10d30:	85ba                	mv	a1,a4
   10d32:	853e                	mv	a0,a5
   10d34:	00000097          	auipc	ra,0x0
   10d38:	d58080e7          	jalr	-680(ra) # 10a8c <getint>
   10d3c:	87aa                	mv	a5,a0
   10d3e:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   10d42:	fd843783          	ld	a5,-40(s0)
   10d46:	0007dc63          	bgez	a5,10d5e <vprintfmt_lib+0x26a>
                print_char('-');
   10d4a:	02d00513          	li	a0,45
   10d4e:	a87ff0ef          	jal	ra,107d4 <print_char>
                num = -(long long) num;
   10d52:	fd843783          	ld	a5,-40(s0)
   10d56:	40f007b3          	neg	a5,a5
   10d5a:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   10d5e:	47a9                	li	a5,10
   10d60:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   10d64:	a089                	j	10da6 <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   10d66:	47a9                	li	a5,10
   10d68:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   10d6c:	a01d                	j	10d92 <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   10d6e:	47a1                	li	a5,8
   10d70:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   10d74:	a839                	j	10d92 <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   10d76:	4785                	li	a5,1
   10d78:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   10d7c:	03000513          	li	a0,48
   10d80:	a55ff0ef          	jal	ra,107d4 <print_char>
            print_char('x');
   10d84:	07800513          	li	a0,120
   10d88:	a4dff0ef          	jal	ra,107d4 <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   10d8c:	47c1                	li	a5,16
   10d8e:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   10d92:	fd042703          	lw	a4,-48(s0)
   10d96:	fa040793          	addi	a5,s0,-96
   10d9a:	85ba                	mv	a1,a4
   10d9c:	853e                	mv	a0,a5
   10d9e:	c83ff0ef          	jal	ra,10a20 <getuint>
   10da2:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   10da6:	fc744783          	lbu	a5,-57(s0)
   10daa:	0007869b          	sext.w	a3,a5
   10dae:	fcc42703          	lw	a4,-52(s0)
   10db2:	fd442783          	lw	a5,-44(s0)
   10db6:	863a                	mv	a2,a4
   10db8:	85be                	mv	a1,a5
   10dba:	fd843503          	ld	a0,-40(s0)
   10dbe:	00000097          	auipc	ra,0x0
   10dc2:	b76080e7          	jalr	-1162(ra) # 10934 <printnum>
            break;
   10dc6:	a831                	j	10de2 <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   10dc8:	8526                	mv	a0,s1
   10dca:	a0bff0ef          	jal	ra,107d4 <print_char>
            break;
   10dce:	a811                	j	10de2 <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   10dd0:	02500513          	li	a0,37
   10dd4:	a01ff0ef          	jal	ra,107d4 <print_char>
            fmt = last_fmt;
   10dd8:	fb843783          	ld	a5,-72(s0)
   10ddc:	faf43423          	sd	a5,-88(s0)
            break;
   10de0:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   10de2:	bb35                	j	10b1e <vprintfmt_lib+0x2a>
                return;
   10de4:	0001                	nop
        }
    }
}
   10de6:	60e6                	ld	ra,88(sp)
   10de8:	6446                	ld	s0,80(sp)
   10dea:	64a6                	ld	s1,72(sp)
   10dec:	6906                	ld	s2,64(sp)
   10dee:	6125                	addi	sp,sp,96
   10df0:	8082                	ret

0000000000010df2 <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   10df2:	7159                	addi	sp,sp,-112
   10df4:	f406                	sd	ra,40(sp)
   10df6:	f022                	sd	s0,32(sp)
   10df8:	1800                	addi	s0,sp,48
   10dfa:	fca43c23          	sd	a0,-40(s0)
   10dfe:	e40c                	sd	a1,8(s0)
   10e00:	e810                	sd	a2,16(s0)
   10e02:	ec14                	sd	a3,24(s0)
   10e04:	f018                	sd	a4,32(s0)
   10e06:	f41c                	sd	a5,40(s0)
   10e08:	03043823          	sd	a6,48(s0)
   10e0c:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   10e10:	04040793          	addi	a5,s0,64
   10e14:	fc878793          	addi	a5,a5,-56
   10e18:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   10e1c:	fe843783          	ld	a5,-24(s0)
   10e20:	85be                	mv	a1,a5
   10e22:	fd843503          	ld	a0,-40(s0)
   10e26:	00000097          	auipc	ra,0x0
   10e2a:	cce080e7          	jalr	-818(ra) # 10af4 <vprintfmt_lib>

    va_end(arg);
}
   10e2e:	0001                	nop
   10e30:	70a2                	ld	ra,40(sp)
   10e32:	7402                	ld	s0,32(sp)
   10e34:	6165                	addi	sp,sp,112
   10e36:	8082                	ret

0000000000010e38 <init_qspi>:
#include "uart.h"

#define CMD18 18
#define CMD12 12

void init_qspi() {
   10e38:	1141                	addi	sp,sp,-16
   10e3a:	e422                	sd	s0,8(sp)
   10e3c:	0800                	addi	s0,sp,16
    // TODO: initialization for real HW
}
   10e3e:	0001                	nop
   10e40:	6422                	ld	s0,8(sp)
   10e42:	0141                	addi	sp,sp,16
   10e44:	8082                	ret

0000000000010e46 <sd_get_byte>:

uint8_t sd_get_byte() {
   10e46:	1101                	addi	sp,sp,-32
   10e48:	ec22                	sd	s0,24(sp)
   10e4a:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10e4c:	100507b7          	lui	a5,0x10050
   10e50:	fef43423          	sd	a5,-24(s0)
    uint32_t rx = 0;
   10e54:	fe042223          	sw	zero,-28(s0)
    do {
        rx = p->rxdata;
   10e58:	fe843783          	ld	a5,-24(s0)
   10e5c:	47fc                	lw	a5,76(a5)
   10e5e:	fef42223          	sw	a5,-28(s0)
    } while (rx & QSPI_RXDATA_EMPTY);
   10e62:	fe442783          	lw	a5,-28(s0)
   10e66:	fe07c9e3          	bltz	a5,10e58 <sd_get_byte+0x12>
    return (uint8_t)rx;
   10e6a:	fe442783          	lw	a5,-28(s0)
   10e6e:	0ff7f793          	andi	a5,a5,255
}
   10e72:	853e                	mv	a0,a5
   10e74:	6462                	ld	s0,24(sp)
   10e76:	6105                	addi	sp,sp,32
   10e78:	8082                	ret

0000000000010e7a <sd_set_byte>:

void sd_set_byte(uint8_t v) {
   10e7a:	7179                	addi	sp,sp,-48
   10e7c:	f422                	sd	s0,40(sp)
   10e7e:	1800                	addi	s0,sp,48
   10e80:	87aa                	mv	a5,a0
   10e82:	fcf40fa3          	sb	a5,-33(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10e86:	100507b7          	lui	a5,0x10050
   10e8a:	fef43423          	sd	a5,-24(s0)
    while (p->txdata & QSPI_TXDATA_FULL) {}
   10e8e:	0001                	nop
   10e90:	fe843783          	ld	a5,-24(s0)
   10e94:	47bc                	lw	a5,72(a5)
   10e96:	2781                	sext.w	a5,a5
   10e98:	2781                	sext.w	a5,a5
   10e9a:	fe07cbe3          	bltz	a5,10e90 <sd_set_byte+0x16>
    p->txdata = v;
   10e9e:	fdf44783          	lbu	a5,-33(s0)
   10ea2:	0007871b          	sext.w	a4,a5
   10ea6:	fe843783          	ld	a5,-24(s0)
   10eaa:	c7b8                	sw	a4,72(a5)
}
   10eac:	0001                	nop
   10eae:	7422                	ld	s0,40(sp)
   10eb0:	6145                	addi	sp,sp,48
   10eb2:	8082                	ret

0000000000010eb4 <sd_read_block>:


void sd_read_block(uint8_t *buf, int sz) {
   10eb4:	7179                	addi	sp,sp,-48
   10eb6:	f406                	sd	ra,40(sp)
   10eb8:	f022                	sd	s0,32(sp)
   10eba:	1800                	addi	s0,sp,48
   10ebc:	fca43c23          	sd	a0,-40(s0)
   10ec0:	87ae                	mv	a5,a1
   10ec2:	fcf42a23          	sw	a5,-44(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10ec6:	100507b7          	lui	a5,0x10050
   10eca:	fef43423          	sd	a5,-24(s0)
    uint8_t token;
    uint8_t crc;

    token = sd_get_byte();
   10ece:	f79ff0ef          	jal	ra,10e46 <sd_get_byte>
   10ed2:	87aa                	mv	a5,a0
   10ed4:	fef403a3          	sb	a5,-25(s0)
    // TODO check token
    while (sz--) {
   10ed8:	a831                	j	10ef4 <sd_read_block+0x40>
       *buf = sd_get_byte();
   10eda:	f6dff0ef          	jal	ra,10e46 <sd_get_byte>
   10ede:	87aa                	mv	a5,a0
   10ee0:	873e                	mv	a4,a5
   10ee2:	fd843783          	ld	a5,-40(s0)
   10ee6:	00e78023          	sb	a4,0(a5) # 10050000 <_end+0x1003e4e4>
       buf++;
   10eea:	fd843783          	ld	a5,-40(s0)
   10eee:	0785                	addi	a5,a5,1
   10ef0:	fcf43c23          	sd	a5,-40(s0)
    while (sz--) {
   10ef4:	fd442783          	lw	a5,-44(s0)
   10ef8:	fff7871b          	addiw	a4,a5,-1
   10efc:	fce42a23          	sw	a4,-44(s0)
   10f00:	ffe9                	bnez	a5,10eda <sd_read_block+0x26>
    }
    crc = sd_get_byte();
   10f02:	f45ff0ef          	jal	ra,10e46 <sd_get_byte>
   10f06:	87aa                	mv	a5,a0
   10f08:	fef40323          	sb	a5,-26(s0)
    crc = sd_get_byte();
   10f0c:	f3bff0ef          	jal	ra,10e46 <sd_get_byte>
   10f10:	87aa                	mv	a5,a0
   10f12:	fef40323          	sb	a5,-26(s0)
}
   10f16:	0001                	nop
   10f18:	70a2                	ld	ra,40(sp)
   10f1a:	7402                	ld	s0,32(sp)
   10f1c:	6145                	addi	sp,sp,48
   10f1e:	8082                	ret

0000000000010f20 <sd_start_reading>:

int sd_start_reading(uint64_t addr) {
   10f20:	7179                	addi	sp,sp,-48
   10f22:	f406                	sd	ra,40(sp)
   10f24:	f022                	sd	s0,32(sp)
   10f26:	1800                	addi	s0,sp,48
   10f28:	fca43c23          	sd	a0,-40(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10f2c:	100507b7          	lui	a5,0x10050
   10f30:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD18);
   10f34:	05200513          	li	a0,82
   10f38:	f43ff0ef          	jal	ra,10e7a <sd_set_byte>
    sd_set_byte(0x00);
   10f3c:	4501                	li	a0,0
   10f3e:	f3dff0ef          	jal	ra,10e7a <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 16) & 0xFF));
   10f42:	fd843783          	ld	a5,-40(s0)
   10f46:	83c1                	srli	a5,a5,0x10
   10f48:	0ff7f793          	andi	a5,a5,255
   10f4c:	853e                	mv	a0,a5
   10f4e:	f2dff0ef          	jal	ra,10e7a <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 8) & 0xFF));
   10f52:	fd843783          	ld	a5,-40(s0)
   10f56:	83a1                	srli	a5,a5,0x8
   10f58:	0ff7f793          	andi	a5,a5,255
   10f5c:	853e                	mv	a0,a5
   10f5e:	f1dff0ef          	jal	ra,10e7a <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 0) & 0xFF));
   10f62:	fd843783          	ld	a5,-40(s0)
   10f66:	0ff7f793          	andi	a5,a5,255
   10f6a:	853e                	mv	a0,a5
   10f6c:	f0fff0ef          	jal	ra,10e7a <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   10f70:	0ff00513          	li	a0,255
   10f74:	f07ff0ef          	jal	ra,10e7a <sd_set_byte>

    cmdresp = sd_get_byte();
   10f78:	00000097          	auipc	ra,0x0
   10f7c:	ece080e7          	jalr	-306(ra) # 10e46 <sd_get_byte>
   10f80:	87aa                	mv	a5,a0
   10f82:	fef403a3          	sb	a5,-25(s0)
    return cmdresp;
   10f86:	fe744783          	lbu	a5,-25(s0)
   10f8a:	2781                	sext.w	a5,a5
}
   10f8c:	853e                	mv	a0,a5
   10f8e:	70a2                	ld	ra,40(sp)
   10f90:	7402                	ld	s0,32(sp)
   10f92:	6145                	addi	sp,sp,48
   10f94:	8082                	ret

0000000000010f96 <sd_stop_reading>:

int sd_stop_reading() {
   10f96:	1101                	addi	sp,sp,-32
   10f98:	ec06                	sd	ra,24(sp)
   10f9a:	e822                	sd	s0,16(sp)
   10f9c:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10f9e:	100507b7          	lui	a5,0x10050
   10fa2:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD12);
   10fa6:	04c00513          	li	a0,76
   10faa:	00000097          	auipc	ra,0x0
   10fae:	ed0080e7          	jalr	-304(ra) # 10e7a <sd_set_byte>
    sd_set_byte(0);
   10fb2:	4501                	li	a0,0
   10fb4:	00000097          	auipc	ra,0x0
   10fb8:	ec6080e7          	jalr	-314(ra) # 10e7a <sd_set_byte>
    sd_set_byte(0);
   10fbc:	4501                	li	a0,0
   10fbe:	00000097          	auipc	ra,0x0
   10fc2:	ebc080e7          	jalr	-324(ra) # 10e7a <sd_set_byte>
    sd_set_byte(0);
   10fc6:	4501                	li	a0,0
   10fc8:	00000097          	auipc	ra,0x0
   10fcc:	eb2080e7          	jalr	-334(ra) # 10e7a <sd_set_byte>
    sd_set_byte(0);
   10fd0:	4501                	li	a0,0
   10fd2:	00000097          	auipc	ra,0x0
   10fd6:	ea8080e7          	jalr	-344(ra) # 10e7a <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   10fda:	0ff00513          	li	a0,255
   10fde:	00000097          	auipc	ra,0x0
   10fe2:	e9c080e7          	jalr	-356(ra) # 10e7a <sd_set_byte>
    cmdresp = sd_get_byte();
   10fe6:	e61ff0ef          	jal	ra,10e46 <sd_get_byte>
   10fea:	87aa                	mv	a5,a0
   10fec:	fef403a3          	sb	a5,-25(s0)

    // TODO: read status
    return cmdresp;
   10ff0:	fe744783          	lbu	a5,-25(s0)
   10ff4:	2781                	sext.w	a5,a5
}
   10ff6:	853e                	mv	a0,a5
   10ff8:	60e2                	ld	ra,24(sp)
   10ffa:	6442                	ld	s0,16(sp)
   10ffc:	6105                	addi	sp,sp,32
   10ffe:	8082                	ret

0000000000011000 <is_empty_gui>:
#include "axi_maps.h"
#include "sd_uefi.h"
#include "spi.h"
#include "uart.h"

int is_empty_gui(const struct gpt_guid *guid) {
   11000:	1101                	addi	sp,sp,-32
   11002:	ec22                	sd	s0,24(sp)
   11004:	1000                	addi	s0,sp,32
   11006:	fea43423          	sd	a0,-24(s0)
    return guid->time_low == 0
   1100a:	fe843783          	ld	a5,-24(s0)
   1100e:	439c                	lw	a5,0(a5)
        && guid->time_mid == 0
        && guid->time_hi_and_version == 0
        && guid->clock_seq_hi == 0
        && guid->clock_seq_low == 0
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11010:	e7ad                	bnez	a5,1107a <is_empty_gui+0x7a>
        && guid->time_mid == 0
   11012:	fe843783          	ld	a5,-24(s0)
   11016:	0047d783          	lhu	a5,4(a5) # 10050004 <_end+0x1003e4e8>
   1101a:	e3a5                	bnez	a5,1107a <is_empty_gui+0x7a>
        && guid->time_hi_and_version == 0
   1101c:	fe843783          	ld	a5,-24(s0)
   11020:	0067d783          	lhu	a5,6(a5)
   11024:	ebb9                	bnez	a5,1107a <is_empty_gui+0x7a>
        && guid->clock_seq_hi == 0
   11026:	fe843783          	ld	a5,-24(s0)
   1102a:	0087c783          	lbu	a5,8(a5)
   1102e:	e7b1                	bnez	a5,1107a <is_empty_gui+0x7a>
        && guid->clock_seq_low == 0
   11030:	fe843783          	ld	a5,-24(s0)
   11034:	0097c783          	lbu	a5,9(a5)
   11038:	e3a9                	bnez	a5,1107a <is_empty_gui+0x7a>
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
   1103a:	fe843783          	ld	a5,-24(s0)
   1103e:	00a7c783          	lbu	a5,10(a5)
   11042:	ef85                	bnez	a5,1107a <is_empty_gui+0x7a>
   11044:	fe843783          	ld	a5,-24(s0)
   11048:	00b7c783          	lbu	a5,11(a5)
   1104c:	e79d                	bnez	a5,1107a <is_empty_gui+0x7a>
   1104e:	fe843783          	ld	a5,-24(s0)
   11052:	00c7c783          	lbu	a5,12(a5)
   11056:	e395                	bnez	a5,1107a <is_empty_gui+0x7a>
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11058:	fe843783          	ld	a5,-24(s0)
   1105c:	00d7c783          	lbu	a5,13(a5)
   11060:	ef89                	bnez	a5,1107a <is_empty_gui+0x7a>
   11062:	fe843783          	ld	a5,-24(s0)
   11066:	00e7c783          	lbu	a5,14(a5)
   1106a:	eb81                	bnez	a5,1107a <is_empty_gui+0x7a>
   1106c:	fe843783          	ld	a5,-24(s0)
   11070:	00f7c783          	lbu	a5,15(a5)
   11074:	e399                	bnez	a5,1107a <is_empty_gui+0x7a>
   11076:	4785                	li	a5,1
   11078:	a011                	j	1107c <is_empty_gui+0x7c>
   1107a:	4781                	li	a5,0
}
   1107c:	853e                	mv	a0,a5
   1107e:	6462                	ld	s0,24(sp)
   11080:	6105                	addi	sp,sp,32
   11082:	8082                	ret

0000000000011084 <print_guid>:



void print_guid(const struct gpt_guid *u)
{
   11084:	7159                	addi	sp,sp,-112
   11086:	f486                	sd	ra,104(sp)
   11088:	f0a2                	sd	s0,96(sp)
   1108a:	1880                	addi	s0,sp,112
   1108c:	fea43423          	sd	a0,-24(s0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11090:	fe843783          	ld	a5,-24(s0)
   11094:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11096:	0187d79b          	srliw	a5,a5,0x18
   1109a:	00078e1b          	sext.w	t3,a5
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   1109e:	fe843783          	ld	a5,-24(s0)
   110a2:	439c                	lw	a5,0(a5)
   110a4:	0107d79b          	srliw	a5,a5,0x10
   110a8:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   110aa:	0ff7f793          	andi	a5,a5,255
   110ae:	00078e9b          	sext.w	t4,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   110b2:	fe843783          	ld	a5,-24(s0)
   110b6:	439c                	lw	a5,0(a5)
   110b8:	0087d79b          	srliw	a5,a5,0x8
   110bc:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   110be:	0ff7f793          	andi	a5,a5,255
   110c2:	00078f1b          	sext.w	t5,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   110c6:	fe843783          	ld	a5,-24(s0)
   110ca:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   110cc:	0ff7f793          	andi	a5,a5,255
   110d0:	00078f9b          	sext.w	t6,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   110d4:	fe843783          	ld	a5,-24(s0)
   110d8:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   110dc:	0087d79b          	srliw	a5,a5,0x8
   110e0:	17c2                	slli	a5,a5,0x30
   110e2:	93c1                	srli	a5,a5,0x30
   110e4:	0007829b          	sext.w	t0,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   110e8:	fe843783          	ld	a5,-24(s0)
   110ec:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   110f0:	2781                	sext.w	a5,a5
   110f2:	0ff7f793          	andi	a5,a5,255
   110f6:	0007839b          	sext.w	t2,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   110fa:	fe843783          	ld	a5,-24(s0)
   110fe:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11102:	0087d79b          	srliw	a5,a5,0x8
   11106:	17c2                	slli	a5,a5,0x30
   11108:	93c1                	srli	a5,a5,0x30
   1110a:	0007809b          	sext.w	ra,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   1110e:	fe843783          	ld	a5,-24(s0)
   11112:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11116:	2781                	sext.w	a5,a5
   11118:	0ff7f793          	andi	a5,a5,255
   1111c:	2781                	sext.w	a5,a5
        u->clock_seq_hi, u->clock_seq_low,
   1111e:	fe843703          	ld	a4,-24(s0)
   11122:	00874703          	lbu	a4,8(a4) # 1008 <_start-0xeff8>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11126:	2701                	sext.w	a4,a4
        u->clock_seq_hi, u->clock_seq_low,
   11128:	fe843683          	ld	a3,-24(s0)
   1112c:	0096c683          	lbu	a3,9(a3)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11130:	2681                	sext.w	a3,a3
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11132:	fe843603          	ld	a2,-24(s0)
   11136:	00a64603          	lbu	a2,10(a2)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1113a:	2601                	sext.w	a2,a2
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   1113c:	fe843583          	ld	a1,-24(s0)
   11140:	00b5c583          	lbu	a1,11(a1) # 100b <_start-0xeff5>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11144:	2581                	sext.w	a1,a1
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11146:	fe843503          	ld	a0,-24(s0)
   1114a:	00c54503          	lbu	a0,12(a0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1114e:	2501                	sext.w	a0,a0
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11150:	fe843803          	ld	a6,-24(s0)
   11154:	00d84803          	lbu	a6,13(a6)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11158:	2801                	sext.w	a6,a6
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   1115a:	fe843883          	ld	a7,-24(s0)
   1115e:	00e8c883          	lbu	a7,14(a7)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11162:	2881                	sext.w	a7,a7
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11164:	fe843303          	ld	t1,-24(s0)
   11168:	00f34303          	lbu	t1,15(t1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1116c:	2301                	sext.w	t1,t1
   1116e:	e09a                	sd	t1,64(sp)
   11170:	fc46                	sd	a7,56(sp)
   11172:	f842                	sd	a6,48(sp)
   11174:	f42a                	sd	a0,40(sp)
   11176:	f02e                	sd	a1,32(sp)
   11178:	ec32                	sd	a2,24(sp)
   1117a:	e836                	sd	a3,16(sp)
   1117c:	e43a                	sd	a4,8(sp)
   1117e:	e03e                	sd	a5,0(sp)
   11180:	8886                	mv	a7,ra
   11182:	881e                	mv	a6,t2
   11184:	8796                	mv	a5,t0
   11186:	877e                	mv	a4,t6
   11188:	86fa                	mv	a3,t5
   1118a:	8676                	mv	a2,t4
   1118c:	85f2                	mv	a1,t3
   1118e:	6549                	lui	a0,0x12
   11190:	80050513          	addi	a0,a0,-2048 # 11800 <strnlen+0x23c>
   11194:	c5fff0ef          	jal	ra,10df2 <printf_uart>
        );
}
   11198:	0001                	nop
   1119a:	70a6                	ld	ra,104(sp)
   1119c:	7406                	ld	s0,96(sp)
   1119e:	6165                	addi	sp,sp,112
   111a0:	8082                	ret

00000000000111a2 <is_uboot_guid>:

int is_uboot_guid(const struct gpt_guid *u) {
   111a2:	7179                	addi	sp,sp,-48
   111a4:	f422                	sd	s0,40(sp)
   111a6:	1800                	addi	s0,sp,48
   111a8:	fca43c23          	sd	a0,-40(s0)
   struct gpt_guid spl = GPT_LOADER1;
   111ac:	5b1937b7          	lui	a5,0x5b193
   111b0:	3007879b          	addiw	a5,a5,768
   111b4:	fef42023          	sw	a5,-32(s0)
   111b8:	c7800793          	li	a5,-904
   111bc:	fef41223          	sh	a5,-28(s0)
   111c0:	6791                	lui	a5,0x4
   111c2:	0cd7879b          	addiw	a5,a5,205
   111c6:	fef41323          	sh	a5,-26(s0)
   111ca:	f8000793          	li	a5,-128
   111ce:	fef40423          	sb	a5,-24(s0)
   111d2:	4789                	li	a5,2
   111d4:	fef404a3          	sb	a5,-23(s0)
   111d8:	57a1                	li	a5,-24
   111da:	fef40523          	sb	a5,-22(s0)
   111de:	06c00793          	li	a5,108
   111e2:	fef405a3          	sb	a5,-21(s0)
   111e6:	04500793          	li	a5,69
   111ea:	fef40623          	sb	a5,-20(s0)
   111ee:	05800793          	li	a5,88
   111f2:	fef406a3          	sb	a5,-19(s0)
   111f6:	47ad                	li	a5,11
   111f8:	fef40723          	sb	a5,-18(s0)
   111fc:	04700793          	li	a5,71
   11200:	fef407a3          	sb	a5,-17(s0)
   return spl.time_low == u->time_low
   11204:	fe042703          	lw	a4,-32(s0)
   11208:	fd843783          	ld	a5,-40(s0)
   1120c:	439c                	lw	a5,0(a5)
       && spl.node[0] == u->node[0]
       && spl.node[1] == u->node[1]
       && spl.node[2] == u->node[2]
       && spl.node[3] == u->node[3]
       && spl.node[4] == u->node[4]
       && spl.node[5] == u->node[5];
   1120e:	0af71863          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.time_mid == u->time_mid
   11212:	fe445703          	lhu	a4,-28(s0)
   11216:	fd843783          	ld	a5,-40(s0)
   1121a:	0047d783          	lhu	a5,4(a5) # 4004 <_start-0xbffc>
   1121e:	2701                	sext.w	a4,a4
   11220:	2781                	sext.w	a5,a5
   11222:	08f71e63          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.time_hi_and_version == u->time_hi_and_version
   11226:	fe645703          	lhu	a4,-26(s0)
   1122a:	fd843783          	ld	a5,-40(s0)
   1122e:	0067d783          	lhu	a5,6(a5)
   11232:	2701                	sext.w	a4,a4
   11234:	2781                	sext.w	a5,a5
   11236:	08f71463          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.clock_seq_hi == u->clock_seq_hi
   1123a:	fe844703          	lbu	a4,-24(s0)
   1123e:	fd843783          	ld	a5,-40(s0)
   11242:	0087c783          	lbu	a5,8(a5)
   11246:	06f71c63          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.clock_seq_low == u->clock_seq_low
   1124a:	fe944703          	lbu	a4,-23(s0)
   1124e:	fd843783          	ld	a5,-40(s0)
   11252:	0097c783          	lbu	a5,9(a5)
   11256:	06f71463          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.node[0] == u->node[0]
   1125a:	fea44703          	lbu	a4,-22(s0)
   1125e:	fd843783          	ld	a5,-40(s0)
   11262:	00a7c783          	lbu	a5,10(a5)
   11266:	04f71c63          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.node[1] == u->node[1]
   1126a:	feb44703          	lbu	a4,-21(s0)
   1126e:	fd843783          	ld	a5,-40(s0)
   11272:	00b7c783          	lbu	a5,11(a5)
   11276:	04f71463          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.node[2] == u->node[2]
   1127a:	fec44703          	lbu	a4,-20(s0)
   1127e:	fd843783          	ld	a5,-40(s0)
   11282:	00c7c783          	lbu	a5,12(a5)
   11286:	02f71c63          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.node[3] == u->node[3]
   1128a:	fed44703          	lbu	a4,-19(s0)
   1128e:	fd843783          	ld	a5,-40(s0)
   11292:	00d7c783          	lbu	a5,13(a5)
   11296:	02f71463          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.node[4] == u->node[4]
   1129a:	fee44703          	lbu	a4,-18(s0)
   1129e:	fd843783          	ld	a5,-40(s0)
   112a2:	00e7c783          	lbu	a5,14(a5)
   112a6:	00f71c63          	bne	a4,a5,112be <is_uboot_guid+0x11c>
       && spl.node[5] == u->node[5];
   112aa:	fef44703          	lbu	a4,-17(s0)
   112ae:	fd843783          	ld	a5,-40(s0)
   112b2:	00f7c783          	lbu	a5,15(a5)
   112b6:	00f71463          	bne	a4,a5,112be <is_uboot_guid+0x11c>
   112ba:	4785                	li	a5,1
   112bc:	a011                	j	112c0 <is_uboot_guid+0x11e>
   112be:	4781                	li	a5,0
}
   112c0:	853e                	mv	a0,a5
   112c2:	7422                	ld	s0,40(sp)
   112c4:	6145                	addi	sp,sp,48
   112c6:	8082                	ret

00000000000112c8 <run_from_sdcard>:

/**
 @ret 0 if uefi partion not found, non-zero otherwise
 */
int run_from_sdcard() {
   112c8:	9c010113          	addi	sp,sp,-1600
   112cc:	62113c23          	sd	ra,1592(sp)
   112d0:	62813823          	sd	s0,1584(sp)
   112d4:	64010413          	addi	s0,sp,1600
    gpt_legacy_mbr lba0;
    gpt_header lba1;
    gpt_entry entry[4];   // 1 entry = 128 bytes; block = 512 Bytes
    uint64_t lba_start = 0;
   112d8:	fe043423          	sd	zero,-24(s0)
    uint64_t lba_end = 0;
   112dc:	fe043023          	sd	zero,-32(s0)
    uint8_t *sram = (uint8_t *)ADDR_BUS0_XSLV_SRAM;
   112e0:	080007b7          	lui	a5,0x8000
   112e4:	fcf43c23          	sd	a5,-40(s0)
    int i4;
   
    init_qspi();
   112e8:	00000097          	auipc	ra,0x0
   112ec:	b50080e7          	jalr	-1200(ra) # 10e38 <init_qspi>

    print_uart("Search uefi\r\n", 13);
   112f0:	45b5                	li	a1,13
   112f2:	67c9                	lui	a5,0x12
   112f4:	84878513          	addi	a0,a5,-1976 # 11848 <strnlen+0x284>
   112f8:	d1eff0ef          	jal	ra,10816 <print_uart>

    sd_start_reading(0);
   112fc:	4501                	li	a0,0
   112fe:	00000097          	auipc	ra,0x0
   11302:	c22080e7          	jalr	-990(ra) # 10f20 <sd_start_reading>

    sd_read_block((uint8_t *)&lba0, sizeof(gpt_legacy_mbr));
   11306:	dc040793          	addi	a5,s0,-576
   1130a:	20000593          	li	a1,512
   1130e:	853e                	mv	a0,a5
   11310:	ba5ff0ef          	jal	ra,10eb4 <sd_read_block>
    sd_read_block((uint8_t *)&lba1, sizeof(gpt_header));
   11314:	bc040793          	addi	a5,s0,-1088
   11318:	20000593          	li	a1,512
   1131c:	853e                	mv	a0,a5
   1131e:	b97ff0ef          	jal	ra,10eb4 <sd_read_block>

    if (lba1.signature != 0x5452415020494645ULL) {
   11322:	bc043703          	ld	a4,-1088(s0)
   11326:	67c9                	lui	a5,0x12
   11328:	8887b783          	ld	a5,-1912(a5) # 11888 <strnlen+0x2c4>
   1132c:	00f70663          	beq	a4,a5,11338 <run_from_sdcard+0x70>
        sd_stop_reading();
   11330:	c67ff0ef          	jal	ra,10f96 <sd_stop_reading>
        return -1;
   11334:	57fd                	li	a5,-1
   11336:	aa7d                	j	114f4 <run_from_sdcard+0x22c>
    }

    for (int i = 0; i < lba1.npartition_entries; i++) {
   11338:	fc042a23          	sw	zero,-44(s0)
   1133c:	a8c5                	j	1142c <run_from_sdcard+0x164>
        i4 = i % 4;
   1133e:	fd442703          	lw	a4,-44(s0)
   11342:	41f7579b          	sraiw	a5,a4,0x1f
   11346:	01e7d79b          	srliw	a5,a5,0x1e
   1134a:	9f3d                	addw	a4,a4,a5
   1134c:	8b0d                	andi	a4,a4,3
   1134e:	40f707bb          	subw	a5,a4,a5
   11352:	fcf42223          	sw	a5,-60(s0)
        if (i4 == 0) {
   11356:	fc442783          	lw	a5,-60(s0)
   1135a:	2781                	sext.w	a5,a5
   1135c:	eb81                	bnez	a5,1136c <run_from_sdcard+0xa4>
            sd_read_block((uint8_t *)entry, sizeof(entry));
   1135e:	9c040793          	addi	a5,s0,-1600
   11362:	20000593          	li	a1,512
   11366:	853e                	mv	a0,a5
   11368:	b4dff0ef          	jal	ra,10eb4 <sd_read_block>
        }
        //guid_to_string(&entry[i4].type, guid);

        if (is_empty_gui(&entry[i4].type)) {
   1136c:	9c040713          	addi	a4,s0,-1600
   11370:	fc442783          	lw	a5,-60(s0)
   11374:	079e                	slli	a5,a5,0x7
   11376:	97ba                	add	a5,a5,a4
   11378:	853e                	mv	a0,a5
   1137a:	00000097          	auipc	ra,0x0
   1137e:	c86080e7          	jalr	-890(ra) # 11000 <is_empty_gui>
   11382:	87aa                	mv	a5,a0
   11384:	efd1                	bnez	a5,11420 <run_from_sdcard+0x158>
            continue;
        }

        printf_uart("[%2d] ", i);
   11386:	fd442783          	lw	a5,-44(s0)
   1138a:	85be                	mv	a1,a5
   1138c:	67c9                	lui	a5,0x12
   1138e:	85878513          	addi	a0,a5,-1960 # 11858 <strnlen+0x294>
   11392:	a61ff0ef          	jal	ra,10df2 <printf_uart>
        print_guid(&entry[i4].type);
   11396:	9c040713          	addi	a4,s0,-1600
   1139a:	fc442783          	lw	a5,-60(s0)
   1139e:	079e                	slli	a5,a5,0x7
   113a0:	97ba                	add	a5,a5,a4
   113a2:	853e                	mv	a0,a5
   113a4:	ce1ff0ef          	jal	ra,11084 <print_guid>
        print_uart(" : ", 3);
   113a8:	458d                	li	a1,3
   113aa:	67c9                	lui	a5,0x12
   113ac:	86078513          	addi	a0,a5,-1952 # 11860 <strnlen+0x29c>
   113b0:	c66ff0ef          	jal	ra,10816 <print_uart>
        print_uart(entry[i4].name, sizeof(entry[i4].name));
   113b4:	9c040713          	addi	a4,s0,-1600
   113b8:	fc442783          	lw	a5,-60(s0)
   113bc:	079e                	slli	a5,a5,0x7
   113be:	03078793          	addi	a5,a5,48
   113c2:	97ba                	add	a5,a5,a4
   113c4:	07a1                	addi	a5,a5,8
   113c6:	04800593          	li	a1,72
   113ca:	853e                	mv	a0,a5
   113cc:	c4aff0ef          	jal	ra,10816 <print_uart>
        print_uart("\r\n", 2);
   113d0:	4589                	li	a1,2
   113d2:	67c9                	lui	a5,0x12
   113d4:	86878513          	addi	a0,a5,-1944 # 11868 <strnlen+0x2a4>
   113d8:	c3eff0ef          	jal	ra,10816 <print_uart>

        if (is_uboot_guid(&entry[i4].type)) {
   113dc:	9c040713          	addi	a4,s0,-1600
   113e0:	fc442783          	lw	a5,-60(s0)
   113e4:	079e                	slli	a5,a5,0x7
   113e6:	97ba                	add	a5,a5,a4
   113e8:	853e                	mv	a0,a5
   113ea:	00000097          	auipc	ra,0x0
   113ee:	db8080e7          	jalr	-584(ra) # 111a2 <is_uboot_guid>
   113f2:	87aa                	mv	a5,a0
   113f4:	c79d                	beqz	a5,11422 <run_from_sdcard+0x15a>
            lba_start = entry[i4].lba_start;
   113f6:	fc442783          	lw	a5,-60(s0)
   113fa:	079e                	slli	a5,a5,0x7
   113fc:	ff040713          	addi	a4,s0,-16
   11400:	97ba                	add	a5,a5,a4
   11402:	9f07b783          	ld	a5,-1552(a5)
   11406:	fef43423          	sd	a5,-24(s0)
            lba_end = entry[i4].lba_end;
   1140a:	fc442783          	lw	a5,-60(s0)
   1140e:	079e                	slli	a5,a5,0x7
   11410:	ff040713          	addi	a4,s0,-16
   11414:	97ba                	add	a5,a5,a4
   11416:	9f87b783          	ld	a5,-1544(a5)
   1141a:	fef43023          	sd	a5,-32(s0)
   1141e:	a011                	j	11422 <run_from_sdcard+0x15a>
            continue;
   11420:	0001                	nop
    for (int i = 0; i < lba1.npartition_entries; i++) {
   11422:	fd442783          	lw	a5,-44(s0)
   11426:	2785                	addiw	a5,a5,1
   11428:	fcf42a23          	sw	a5,-44(s0)
   1142c:	c1042703          	lw	a4,-1008(s0)
   11430:	fd442783          	lw	a5,-44(s0)
   11434:	f0e7e5e3          	bltu	a5,a4,1133e <run_from_sdcard+0x76>
        }
    }

    sd_stop_reading();
   11438:	b5fff0ef          	jal	ra,10f96 <sd_stop_reading>

    if (lba_start == 0) {
   1143c:	fe843783          	ld	a5,-24(s0)
   11440:	e399                	bnez	a5,11446 <run_from_sdcard+0x17e>
        return -1;
   11442:	57fd                	li	a5,-1
   11444:	a845                	j	114f4 <run_from_sdcard+0x22c>
    }

    // Coping SPL partition Data
    sd_start_reading(512 * lba_start);
   11446:	fe843783          	ld	a5,-24(s0)
   1144a:	07a6                	slli	a5,a5,0x9
   1144c:	853e                	mv	a0,a5
   1144e:	00000097          	auipc	ra,0x0
   11452:	ad2080e7          	jalr	-1326(ra) # 10f20 <sd_start_reading>

    printf_uart("Coping %d KB", (lba_end - lba_start + 1) / 2);
   11456:	fe043703          	ld	a4,-32(s0)
   1145a:	fe843783          	ld	a5,-24(s0)
   1145e:	40f707b3          	sub	a5,a4,a5
   11462:	0785                	addi	a5,a5,1
   11464:	8385                	srli	a5,a5,0x1
   11466:	85be                	mv	a1,a5
   11468:	67c9                	lui	a5,0x12
   1146a:	87078513          	addi	a0,a5,-1936 # 11870 <strnlen+0x2ac>
   1146e:	985ff0ef          	jal	ra,10df2 <printf_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   11472:	fe843783          	ld	a5,-24(s0)
   11476:	fcf43423          	sd	a5,-56(s0)
   1147a:	a8b1                	j	114d6 <run_from_sdcard+0x20e>
        sd_read_block((uint8_t *)entry, sizeof(entry));   // reuse the same buffer
   1147c:	9c040793          	addi	a5,s0,-1600
   11480:	20000593          	li	a1,512
   11484:	853e                	mv	a0,a5
   11486:	a2fff0ef          	jal	ra,10eb4 <sd_read_block>
        memcpy(sram, entry, sizeof(entry));
   1148a:	fd843783          	ld	a5,-40(s0)
   1148e:	86be                	mv	a3,a5
   11490:	9c040793          	addi	a5,s0,-1600
   11494:	20000713          	li	a4,512
   11498:	863a                	mv	a2,a4
   1149a:	85be                	mv	a1,a5
   1149c:	8536                	mv	a0,a3
   1149e:	00000097          	auipc	ra,0x0
   114a2:	066080e7          	jalr	102(ra) # 11504 <memcpy>
        sram += sizeof(entry);
   114a6:	fd843783          	ld	a5,-40(s0)
   114aa:	20078793          	addi	a5,a5,512
   114ae:	fcf43c23          	sd	a5,-40(s0)
        if ((i % 100) == 0) {
   114b2:	fc843703          	ld	a4,-56(s0)
   114b6:	06400793          	li	a5,100
   114ba:	02f777b3          	remu	a5,a4,a5
   114be:	e799                	bnez	a5,114cc <run_from_sdcard+0x204>
            print_uart(". ", 2);
   114c0:	4589                	li	a1,2
   114c2:	67c9                	lui	a5,0x12
   114c4:	88078513          	addi	a0,a5,-1920 # 11880 <strnlen+0x2bc>
   114c8:	b4eff0ef          	jal	ra,10816 <print_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   114cc:	fc843783          	ld	a5,-56(s0)
   114d0:	0785                	addi	a5,a5,1
   114d2:	fcf43423          	sd	a5,-56(s0)
   114d6:	fc843703          	ld	a4,-56(s0)
   114da:	fe043783          	ld	a5,-32(s0)
   114de:	f8e7ffe3          	bleu	a4,a5,1147c <run_from_sdcard+0x1b4>
        }
    }
    print_uart("\r\n", 2);
   114e2:	4589                	li	a1,2
   114e4:	67c9                	lui	a5,0x12
   114e6:	86878513          	addi	a0,a5,-1944 # 11868 <strnlen+0x2a4>
   114ea:	b2cff0ef          	jal	ra,10816 <print_uart>

    sd_stop_reading();
   114ee:	aa9ff0ef          	jal	ra,10f96 <sd_stop_reading>
    return 0;
   114f2:	4781                	li	a5,0
}
   114f4:	853e                	mv	a0,a5
   114f6:	63813083          	ld	ra,1592(sp)
   114fa:	63013403          	ld	s0,1584(sp)
   114fe:	64010113          	addi	sp,sp,1600
   11502:	8082                	ret

0000000000011504 <memcpy>:
   11504:	00a5c7b3          	xor	a5,a1,a0
   11508:	8b9d                	andi	a5,a5,7
   1150a:	00c50733          	add	a4,a0,a2
   1150e:	e781                	bnez	a5,11516 <memcpy+0x12>
   11510:	479d                	li	a5,7
   11512:	00c7ef63          	bltu	a5,a2,11530 <memcpy+0x2c>
   11516:	87aa                	mv	a5,a0
   11518:	00e56963          	bltu	a0,a4,1152a <memcpy+0x26>
   1151c:	8082                	ret
   1151e:	0005c683          	lbu	a3,0(a1)
   11522:	0785                	addi	a5,a5,1
   11524:	0585                	addi	a1,a1,1
   11526:	fed78fa3          	sb	a3,-1(a5)
   1152a:	fee7eae3          	bltu	a5,a4,1151e <memcpy+0x1a>
   1152e:	8082                	ret
   11530:	00757793          	andi	a5,a0,7
   11534:	ebbd                	bnez	a5,115aa <memcpy+0xa6>
   11536:	87aa                	mv	a5,a0
   11538:	ff877693          	andi	a3,a4,-8
   1153c:	fc068613          	addi	a2,a3,-64
   11540:	06c7fc63          	bleu	a2,a5,115b8 <memcpy+0xb4>
   11544:	0005b383          	ld	t2,0(a1)
   11548:	0085b283          	ld	t0,8(a1)
   1154c:	0105bf83          	ld	t6,16(a1)
   11550:	0185bf03          	ld	t5,24(a1)
   11554:	0205be83          	ld	t4,32(a1)
   11558:	0285be03          	ld	t3,40(a1)
   1155c:	0305b303          	ld	t1,48(a1)
   11560:	0385b883          	ld	a7,56(a1)
   11564:	04858593          	addi	a1,a1,72
   11568:	04878793          	addi	a5,a5,72
   1156c:	ff85b803          	ld	a6,-8(a1)
   11570:	fa77bc23          	sd	t2,-72(a5)
   11574:	fc57b023          	sd	t0,-64(a5)
   11578:	fdf7b423          	sd	t6,-56(a5)
   1157c:	fde7b823          	sd	t5,-48(a5)
   11580:	fdd7bc23          	sd	t4,-40(a5)
   11584:	ffc7b023          	sd	t3,-32(a5)
   11588:	fe67b423          	sd	t1,-24(a5)
   1158c:	ff17b823          	sd	a7,-16(a5)
   11590:	ff07bc23          	sd	a6,-8(a5)
   11594:	b775                	j	11540 <memcpy+0x3c>
   11596:	0005c683          	lbu	a3,0(a1)
   1159a:	0785                	addi	a5,a5,1
   1159c:	0585                	addi	a1,a1,1
   1159e:	fed78fa3          	sb	a3,-1(a5)
   115a2:	0077f693          	andi	a3,a5,7
   115a6:	fae5                	bnez	a3,11596 <memcpy+0x92>
   115a8:	bf41                	j	11538 <memcpy+0x34>
   115aa:	87aa                	mv	a5,a0
   115ac:	bfdd                	j	115a2 <memcpy+0x9e>
   115ae:	6190                	ld	a2,0(a1)
   115b0:	07a1                	addi	a5,a5,8
   115b2:	05a1                	addi	a1,a1,8
   115b4:	fec7bc23          	sd	a2,-8(a5)
   115b8:	fed7ebe3          	bltu	a5,a3,115ae <memcpy+0xaa>
   115bc:	f6e7e7e3          	bltu	a5,a4,1152a <memcpy+0x26>
   115c0:	8082                	ret
	...

00000000000115c4 <strnlen>:
   115c4:	95aa                	add	a1,a1,a0
   115c6:	87aa                	mv	a5,a0
   115c8:	00b78563          	beq	a5,a1,115d2 <strnlen+0xe>
   115cc:	0007c703          	lbu	a4,0(a5)
   115d0:	e701                	bnez	a4,115d8 <strnlen+0x14>
   115d2:	40a78533          	sub	a0,a5,a0
   115d6:	8082                	ret
   115d8:	0785                	addi	a5,a5,1
   115da:	b7fd                	j	115c8 <strnlen+0x4>
	...
